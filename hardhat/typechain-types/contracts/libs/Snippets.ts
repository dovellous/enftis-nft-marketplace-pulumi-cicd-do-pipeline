/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Structs {
  export type NFTItemStruct = {
    minterAddress: PromiseOrValue<string>;
    creatorAddress: [PromiseOrValue<string>, PromiseOrValue<string>];
    ownerAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type NFTItemStructOutput = [
    string,
    [string, string],
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    minterAddress: string;
    creatorAddress: [string, string];
    ownerAddress: string;
    tokenId: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface SnippetsInterface extends utils.Interface {
  functions: {
    "bytes32String(bytes32)": FunctionFragment;
    "compareStrings(string,string)": FunctionFragment;
    "getIPFSPrefix()": FunctionFragment;
    "searchHasMatch(string,bytes,(address,address[2],address,uint256,uint256,uint256),string)": FunctionFragment;
    "stringContains(string,string)": FunctionFragment;
    "subString(string,uint256,uint256)": FunctionFragment;
    "trim(string,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bytes32String"
      | "compareStrings"
      | "getIPFSPrefix"
      | "searchHasMatch"
      | "stringContains"
      | "subString"
      | "trim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bytes32String",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "compareStrings",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIPFSPrefix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "searchHasMatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      Structs.NFTItemStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stringContains",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subString",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "bytes32String",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compareStrings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIPFSPrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchHasMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringContains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subString", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trim", data: BytesLike): Result;

  events: {};
}

export interface Snippets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SnippetsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bytes32String(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    compareStrings(
      a: PromiseOrValue<string>,
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIPFSPrefix(overrides?: CallOverrides): Promise<[string]>;

    searchHasMatch(
      _itemKey: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _nftItem: Structs.NFTItemStruct,
      _tokenURIString: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stringContains(
      what: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    subString(
      str: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    trim(
      str: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  bytes32String(
    _bytes32: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  compareStrings(
    a: PromiseOrValue<string>,
    b: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIPFSPrefix(overrides?: CallOverrides): Promise<string>;

  searchHasMatch(
    _itemKey: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    _nftItem: Structs.NFTItemStruct,
    _tokenURIString: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stringContains(
    what: PromiseOrValue<string>,
    where: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  subString(
    str: PromiseOrValue<string>,
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  trim(
    str: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    bytes32String(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    compareStrings(
      a: PromiseOrValue<string>,
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIPFSPrefix(overrides?: CallOverrides): Promise<string>;

    searchHasMatch(
      _itemKey: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _nftItem: Structs.NFTItemStruct,
      _tokenURIString: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stringContains(
      what: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    subString(
      str: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    trim(
      str: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bytes32String(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compareStrings(
      a: PromiseOrValue<string>,
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIPFSPrefix(overrides?: CallOverrides): Promise<BigNumber>;

    searchHasMatch(
      _itemKey: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _nftItem: Structs.NFTItemStruct,
      _tokenURIString: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringContains(
      what: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subString(
      str: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trim(
      str: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bytes32String(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compareStrings(
      a: PromiseOrValue<string>,
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIPFSPrefix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    searchHasMatch(
      _itemKey: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _nftItem: Structs.NFTItemStruct,
      _tokenURIString: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringContains(
      what: PromiseOrValue<string>,
      where: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subString(
      str: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trim(
      str: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
