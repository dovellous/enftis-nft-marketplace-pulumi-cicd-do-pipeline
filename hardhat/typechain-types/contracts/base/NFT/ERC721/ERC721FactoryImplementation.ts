/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace ERCStructs {
  export type NFTItemStruct = {
    ownerAddress: PromiseOrValue<string>;
    creatorAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
  };

  export type NFTItemStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    ownerAddress: string;
    creatorAddress: string;
    tokenId: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
    tokenURI: string;
  };

  export type TokenActivityItemStruct = {
    activityType: PromiseOrValue<BigNumberish>;
    fromAddress: PromiseOrValue<string>;
    toAddress: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<string>;
  };

  export type TokenActivityItemStructOutput = [
    number,
    string,
    string,
    BigNumber,
    string
  ] & {
    activityType: number;
    fromAddress: string;
    toAddress: string;
    timestamp: BigNumber;
    data: string;
  };

  export type RoyaltyItemStruct = {
    royaltyIsDefined: PromiseOrValue<boolean>;
    royaltyReceiver: PromiseOrValue<string>;
    royaltyFraction: PromiseOrValue<BigNumberish>;
    royaltyAmount: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type RoyaltyItemStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    royaltyIsDefined: boolean;
    royaltyReceiver: string;
    royaltyFraction: BigNumber;
    royaltyAmount: BigNumber;
    tokenId: BigNumber;
  };
}

export interface ERC721FactoryImplementationInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "AMOUNT_BELOW_MINTING_FEE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "IMPLEMENTATION_TYPE()": FunctionFragment;
    "INDEX_OUT_OF_BOUNDS()": FunctionFragment;
    "INSUFFICIENT_PERMISSIONS()": FunctionFragment;
    "MAX_SUPPLY_REACHED()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "NOT_APPROVED_OWNER()": FunctionFragment;
    "NO_ADMINS_SPECIFIED()": FunctionFragment;
    "NO_MINTERS_SPECIFIED()": FunctionFragment;
    "TOKEN_DOES_NOT_EXISTS()": FunctionFragment;
    "TOKEN_URI_EXISTS()": FunctionFragment;
    "ZERO_ADDRESS()": FunctionFragment;
    "_tokenCurrentSupply()": FunctionFragment;
    "_tokenIdCounter()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveAddressForTokenId(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "callFallback(address)": FunctionFragment;
    "collectionDescription()": FunctionFragment;
    "collectionDisplayPicture()": FunctionFragment;
    "collectionItems()": FunctionFragment;
    "collectionMaxSupply()": FunctionFragment;
    "collectionName()": FunctionFragment;
    "collectionRoyaltiesEnabled()": FunctionFragment;
    "collectionSymbol()": FunctionFragment;
    "contractOptionsStruct()": FunctionFragment;
    "contractTreasury()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getBaseURI()": FunctionFragment;
    "getContractURI()": FunctionFragment;
    "getCreatorTokenCount(address)": FunctionFragment;
    "getEthBalance()": FunctionFragment;
    "getMarketplaceAddress()": FunctionFragment;
    "getMintingFee()": FunctionFragment;
    "getNFTItem(uint256)": FunctionFragment;
    "getNFTItemFull(uint256)": FunctionFragment;
    "getNFTItems()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getOwnerTokenCount(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoyaltyFraction()": FunctionFragment;
    "getRoyaltyReceiver()": FunctionFragment;
    "getTokenCategory()": FunctionFragment;
    "getTokenCreator(uint256)": FunctionFragment;
    "getTokenCurrentId()": FunctionFragment;
    "getTokenCurrentSupply()": FunctionFragment;
    "getTokenMaximumSupply()": FunctionFragment;
    "getTokenMintingFee()": FunctionFragment;
    "getTokenOwner(uint256)": FunctionFragment;
    "getTokenRoyaltyInfo(uint256,uint256)": FunctionFragment;
    "getTokenURI(uint256)": FunctionFragment;
    "getTokensCreatedByAddress(address)": FunctionFragment;
    "getTokensCreatedByMe()": FunctionFragment;
    "getTokensOwnedByAddress(address)": FunctionFragment;
    "getTokensOwnedByMe()": FunctionFragment;
    "getWeiBalance()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintNewToken(address,string,uint96)": FunctionFragment;
    "mintingFee()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "recoverTokens(address,address,uint8,uint256,uint256)": FunctionFragment;
    "renounceAdminRole(address)": FunctionFragment;
    "renounceMinterRole(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeAdminRole(address)": FunctionFragment;
    "revokeMinterRole(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "royaltiesEnabled()": FunctionFragment;
    "royaltyFraction()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "royaltyReceiver()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setAdminRole(address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setCollectionDescription(string)": FunctionFragment;
    "setCollectionDisplayPicture(string)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setMarketplaceAddress(address)": FunctionFragment;
    "setMinterRole(address)": FunctionFragment;
    "setMintingFee(uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setTokenCategory(uint8)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenIdToNFTItem(uint256)": FunctionFragment;
    "tokenIdToTokenActivityItem(uint256,uint256)": FunctionFragment;
    "tokenMaximumSupply()": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokenURIExists(string)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferToFallback(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "AMOUNT_BELOW_MINTING_FEE"
      | "DEFAULT_ADMIN_ROLE"
      | "IMPLEMENTATION_TYPE"
      | "INDEX_OUT_OF_BOUNDS"
      | "INSUFFICIENT_PERMISSIONS"
      | "MAX_SUPPLY_REACHED"
      | "MINTER_ROLE"
      | "NOT_APPROVED_OWNER"
      | "NO_ADMINS_SPECIFIED"
      | "NO_MINTERS_SPECIFIED"
      | "TOKEN_DOES_NOT_EXISTS"
      | "TOKEN_URI_EXISTS"
      | "ZERO_ADDRESS"
      | "_tokenCurrentSupply"
      | "_tokenIdCounter"
      | "approve"
      | "approveAddressForTokenId"
      | "balanceOf"
      | "baseTokenURI"
      | "burn"
      | "callFallback"
      | "collectionDescription"
      | "collectionDisplayPicture"
      | "collectionItems"
      | "collectionMaxSupply"
      | "collectionName"
      | "collectionRoyaltiesEnabled"
      | "collectionSymbol"
      | "contractOptionsStruct"
      | "contractTreasury"
      | "getApproved"
      | "getBaseURI"
      | "getContractURI"
      | "getCreatorTokenCount"
      | "getEthBalance"
      | "getMarketplaceAddress"
      | "getMintingFee"
      | "getNFTItem"
      | "getNFTItemFull"
      | "getNFTItems"
      | "getOwner"
      | "getOwnerTokenCount"
      | "getRoleAdmin"
      | "getRoyaltyFraction"
      | "getRoyaltyReceiver"
      | "getTokenCategory"
      | "getTokenCreator"
      | "getTokenCurrentId"
      | "getTokenCurrentSupply"
      | "getTokenMaximumSupply"
      | "getTokenMintingFee"
      | "getTokenOwner"
      | "getTokenRoyaltyInfo"
      | "getTokenURI"
      | "getTokensCreatedByAddress"
      | "getTokensCreatedByMe"
      | "getTokensOwnedByAddress"
      | "getTokensOwnedByMe"
      | "getWeiBalance"
      | "grantRole"
      | "hasRole"
      | "isApprovedForAll"
      | "mintNewToken"
      | "mintingFee"
      | "name"
      | "owner"
      | "ownerOf"
      | "pause"
      | "paused"
      | "recoverTokens"
      | "renounceAdminRole"
      | "renounceMinterRole"
      | "renounceRole"
      | "revokeAdminRole"
      | "revokeMinterRole"
      | "revokeRole"
      | "royaltiesEnabled"
      | "royaltyFraction"
      | "royaltyInfo"
      | "royaltyReceiver"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setAdminRole"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setCollectionDescription"
      | "setCollectionDisplayPicture"
      | "setContractURI"
      | "setMarketplaceAddress"
      | "setMinterRole"
      | "setMintingFee"
      | "setOwner"
      | "setTokenCategory"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenIdToNFTItem"
      | "tokenIdToTokenActivityItem"
      | "tokenMaximumSupply"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "tokenURIExists"
      | "totalSupply"
      | "transferFrom"
      | "transferToFallback"
      | "unpause"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AMOUNT_BELOW_MINTING_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPLEMENTATION_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_OUT_OF_BOUNDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSUFFICIENT_PERMISSIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY_REACHED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NOT_APPROVED_OWNER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NO_ADMINS_SPECIFIED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NO_MINTERS_SPECIFIED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_DOES_NOT_EXISTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_URI_EXISTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenCurrentSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAddressForTokenId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "callFallback",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionDescription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionDisplayPicture",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionMaxSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionRoyaltiesEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractOptionsStruct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorTokenCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketplaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTItemFull",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTItems",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOwnerTokenCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCategory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCreator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCurrentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCurrentSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMaximumSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRoyaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensCreatedByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensCreatedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOwnedByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOwnedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWeiBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinterRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMinterRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionDescription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionDisplayPicture",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplaceAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinterRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenCategory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToNFTItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToTokenActivityItem",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMaximumSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURIExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToFallback",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AMOUNT_BELOW_MINTING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPLEMENTATION_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_OUT_OF_BOUNDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSUFFICIENT_PERMISSIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SUPPLY_REACHED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NOT_APPROVED_OWNER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NO_ADMINS_SPECIFIED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NO_MINTERS_SPECIFIED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_DOES_NOT_EXISTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_URI_EXISTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZERO_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_tokenCurrentSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_tokenIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAddressForTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionDisplayPicture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionRoyaltiesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOptionsStruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFTItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNFTItemFull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCurrentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCurrentSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMaximumSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensCreatedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensCreatedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOwnedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOwnedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeiBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionDisplayPicture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToNFTItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToTokenActivityItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMaximumSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenURIExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BaseURIChanged(string)": EventFragment;
    "CollectionDescriptionChanged(string)": EventFragment;
    "CollectionDisplayPictureChanged(string)": EventFragment;
    "ContractURIChanged(string)": EventFragment;
    "Log(string,uint256)": EventFragment;
    "MarketplaceAddressChanged(address)": EventFragment;
    "MarketplaceAddressForTokenChanged(address,uint256)": EventFragment;
    "MintingFeeChanged(uint256)": EventFragment;
    "OwnerChanged(address)": EventFragment;
    "Paused(address)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokenBurned(address,address,uint256,uint256,string)": EventFragment;
    "TokenCategoryChanged(uint8)": EventFragment;
    "TokenMinted(address,address,uint256,uint256,string,tuple)": EventFragment;
    "TokenTransfered(address,address,uint256,uint256,string,tuple)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseURIChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollectionDescriptionChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollectionDisplayPictureChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketplaceAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MarketplaceAddressForTokenChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCategoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseURIChangedEventObject {
  newURI: string;
}
export type BaseURIChangedEvent = TypedEvent<
  [string],
  BaseURIChangedEventObject
>;

export type BaseURIChangedEventFilter = TypedEventFilter<BaseURIChangedEvent>;

export interface CollectionDescriptionChangedEventObject {
  description: string;
}
export type CollectionDescriptionChangedEvent = TypedEvent<
  [string],
  CollectionDescriptionChangedEventObject
>;

export type CollectionDescriptionChangedEventFilter =
  TypedEventFilter<CollectionDescriptionChangedEvent>;

export interface CollectionDisplayPictureChangedEventObject {
  photoURL: string;
}
export type CollectionDisplayPictureChangedEvent = TypedEvent<
  [string],
  CollectionDisplayPictureChangedEventObject
>;

export type CollectionDisplayPictureChangedEventFilter =
  TypedEventFilter<CollectionDisplayPictureChangedEvent>;

export interface ContractURIChangedEventObject {
  newURI: string;
}
export type ContractURIChangedEvent = TypedEvent<
  [string],
  ContractURIChangedEventObject
>;

export type ContractURIChangedEventFilter =
  TypedEventFilter<ContractURIChangedEvent>;

export interface LogEventObject {
  func: string;
  gas: BigNumber;
}
export type LogEvent = TypedEvent<[string, BigNumber], LogEventObject>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export interface MarketplaceAddressChangedEventObject {
  newMarketplaceAddress: string;
}
export type MarketplaceAddressChangedEvent = TypedEvent<
  [string],
  MarketplaceAddressChangedEventObject
>;

export type MarketplaceAddressChangedEventFilter =
  TypedEventFilter<MarketplaceAddressChangedEvent>;

export interface MarketplaceAddressForTokenChangedEventObject {
  newMarketplaceAddress: string;
  tokenId: BigNumber;
}
export type MarketplaceAddressForTokenChangedEvent = TypedEvent<
  [string, BigNumber],
  MarketplaceAddressForTokenChangedEventObject
>;

export type MarketplaceAddressForTokenChangedEventFilter =
  TypedEventFilter<MarketplaceAddressForTokenChangedEvent>;

export interface MintingFeeChangedEventObject {
  newMintingFee: BigNumber;
}
export type MintingFeeChangedEvent = TypedEvent<
  [BigNumber],
  MintingFeeChangedEventObject
>;

export type MintingFeeChangedEventFilter =
  TypedEventFilter<MintingFeeChangedEvent>;

export interface OwnerChangedEventObject {
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReceivedEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type ReceivedEvent = TypedEvent<
  [string, BigNumber],
  ReceivedEventObject
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokenBurnedEventObject {
  creator: string;
  burner: string;
  burnedTokenId: BigNumber;
  batchSize: BigNumber;
  burnedTokenURI: string;
}
export type TokenBurnedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  TokenBurnedEventObject
>;

export type TokenBurnedEventFilter = TypedEventFilter<TokenBurnedEvent>;

export interface TokenCategoryChangedEventObject {
  newTokenCategotyIndex: number;
}
export type TokenCategoryChangedEvent = TypedEvent<
  [number],
  TokenCategoryChangedEventObject
>;

export type TokenCategoryChangedEventFilter =
  TypedEventFilter<TokenCategoryChangedEvent>;

export interface TokenMintedEventObject {
  creator: string;
  minter: string;
  newTokenId: BigNumber;
  batchSize: BigNumber;
  newTokenURI: string;
  newToken: ERCStructs.NFTItemStructOutput;
}
export type TokenMintedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    ERCStructs.NFTItemStructOutput
  ],
  TokenMintedEventObject
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export interface TokenTransferedEventObject {
  creator: string;
  burner: string;
  transferedTokenId: BigNumber;
  batchSize: BigNumber;
  transferedTokenURI: string;
  trandferedToken: ERCStructs.NFTItemStructOutput;
}
export type TokenTransferedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    ERCStructs.NFTItemStructOutput
  ],
  TokenTransferedEventObject
>;

export type TokenTransferedEventFilter = TypedEventFilter<TokenTransferedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ERC721FactoryImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721FactoryImplementationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    AMOUNT_BELOW_MINTING_FEE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    IMPLEMENTATION_TYPE(overrides?: CallOverrides): Promise<[string]>;

    INDEX_OUT_OF_BOUNDS(overrides?: CallOverrides): Promise<[string]>;

    INSUFFICIENT_PERMISSIONS(overrides?: CallOverrides): Promise<[string]>;

    MAX_SUPPLY_REACHED(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    NOT_APPROVED_OWNER(overrides?: CallOverrides): Promise<[string]>;

    NO_ADMINS_SPECIFIED(overrides?: CallOverrides): Promise<[string]>;

    NO_MINTERS_SPECIFIED(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_DOES_NOT_EXISTS(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_URI_EXISTS(overrides?: CallOverrides): Promise<[string]>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    _tokenCurrentSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    _tokenIdCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveAddressForTokenId(
      _account: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseTokenURI(overrides?: CallOverrides): Promise<[string]>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callFallback(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectionDescription(overrides?: CallOverrides): Promise<[string]>;

    collectionDisplayPicture(overrides?: CallOverrides): Promise<[string]>;

    collectionItems(
      overrides?: CallOverrides
    ): Promise<[ERCStructs.NFTItemStructOutput[]]>;

    collectionMaxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectionName(overrides?: CallOverrides): Promise<[string]>;

    collectionRoyaltiesEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    collectionSymbol(overrides?: CallOverrides): Promise<[string]>;

    contractOptionsStruct(
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { pausable: boolean; burnable: boolean }>;

    contractTreasury(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBaseURI(overrides?: CallOverrides): Promise<[string]>;

    getContractURI(overrides?: CallOverrides): Promise<[string]>;

    getCreatorTokenCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEthBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketplaceAddress(overrides?: CallOverrides): Promise<[string]>;

    getMintingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNFTItem(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ERCStructs.NFTItemStructOutput]>;

    getNFTItemFull(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        ERCStructs.NFTItemStructOutput,
        ERCStructs.TokenActivityItemStructOutput[]
      ]
    >;

    getNFTItems(
      overrides?: CallOverrides
    ): Promise<[ERCStructs.NFTItemStructOutput[]]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getOwnerTokenCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoyaltyFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoyaltyReceiver(overrides?: CallOverrides): Promise<[string]>;

    getTokenCategory(overrides?: CallOverrides): Promise<[number]>;

    getTokenCreator(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenCurrentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenCurrentSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenMaximumSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenMintingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenOwner(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenRoyaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ERCStructs.RoyaltyItemStructOutput]>;

    getTokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokensCreatedByAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ERCStructs.NFTItemStructOutput[]]>;

    getTokensCreatedByMe(
      overrides?: CallOverrides
    ): Promise<[ERCStructs.NFTItemStructOutput[]]>;

    getTokensOwnedByAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ERCStructs.NFTItemStructOutput[]]>;

    getTokensOwnedByMe(
      overrides?: CallOverrides
    ): Promise<[ERCStructs.NFTItemStructOutput[]]>;

    getWeiBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintNewToken(
      _to: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _royaltyFraction: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    recoverTokens(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _standard: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltiesEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    royaltyFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    royaltyReceiver(overrides?: CallOverrides): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _newBaseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollectionDescription(
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollectionDisplayPicture(
      _photoURL: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      _newContractURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketplaceAddress(
      _newMarketplaceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintingFee(
      _newMintingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenCategory(
      _tokenCategoryEnumIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIdToNFTItem(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, string] & {
        ownerAddress: string;
        creatorAddress: string;
        tokenId: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        tokenURI: string;
      }
    >;

    tokenIdToTokenActivityItem(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber, string] & {
        activityType: number;
        fromAddress: string;
        toAddress: string;
        timestamp: BigNumber;
        data: string;
      }
    >;

    tokenMaximumSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenURIExists(
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferToFallback(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  AMOUNT_BELOW_MINTING_FEE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  IMPLEMENTATION_TYPE(overrides?: CallOverrides): Promise<string>;

  INDEX_OUT_OF_BOUNDS(overrides?: CallOverrides): Promise<string>;

  INSUFFICIENT_PERMISSIONS(overrides?: CallOverrides): Promise<string>;

  MAX_SUPPLY_REACHED(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  NOT_APPROVED_OWNER(overrides?: CallOverrides): Promise<string>;

  NO_ADMINS_SPECIFIED(overrides?: CallOverrides): Promise<string>;

  NO_MINTERS_SPECIFIED(overrides?: CallOverrides): Promise<string>;

  TOKEN_DOES_NOT_EXISTS(overrides?: CallOverrides): Promise<string>;

  TOKEN_URI_EXISTS(overrides?: CallOverrides): Promise<string>;

  ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

  _tokenCurrentSupply(overrides?: CallOverrides): Promise<BigNumber>;

  _tokenIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveAddressForTokenId(
    _account: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  burn(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callFallback(
    _to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectionDescription(overrides?: CallOverrides): Promise<string>;

  collectionDisplayPicture(overrides?: CallOverrides): Promise<string>;

  collectionItems(
    overrides?: CallOverrides
  ): Promise<ERCStructs.NFTItemStructOutput[]>;

  collectionMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  collectionName(overrides?: CallOverrides): Promise<string>;

  collectionRoyaltiesEnabled(overrides?: CallOverrides): Promise<boolean>;

  collectionSymbol(overrides?: CallOverrides): Promise<string>;

  contractOptionsStruct(
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { pausable: boolean; burnable: boolean }>;

  contractTreasury(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBaseURI(overrides?: CallOverrides): Promise<string>;

  getContractURI(overrides?: CallOverrides): Promise<string>;

  getCreatorTokenCount(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEthBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketplaceAddress(overrides?: CallOverrides): Promise<string>;

  getMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

  getNFTItem(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ERCStructs.NFTItemStructOutput>;

  getNFTItemFull(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [ERCStructs.NFTItemStructOutput, ERCStructs.TokenActivityItemStructOutput[]]
  >;

  getNFTItems(
    overrides?: CallOverrides
  ): Promise<ERCStructs.NFTItemStructOutput[]>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getOwnerTokenCount(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoyaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

  getRoyaltyReceiver(overrides?: CallOverrides): Promise<string>;

  getTokenCategory(overrides?: CallOverrides): Promise<number>;

  getTokenCreator(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenCurrentId(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenCurrentSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenMaximumSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenOwner(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenRoyaltyInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ERCStructs.RoyaltyItemStructOutput>;

  getTokenURI(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokensCreatedByAddress(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ERCStructs.NFTItemStructOutput[]>;

  getTokensCreatedByMe(
    overrides?: CallOverrides
  ): Promise<ERCStructs.NFTItemStructOutput[]>;

  getTokensOwnedByAddress(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ERCStructs.NFTItemStructOutput[]>;

  getTokensOwnedByMe(
    overrides?: CallOverrides
  ): Promise<ERCStructs.NFTItemStructOutput[]>;

  getWeiBalance(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintNewToken(
    _to: PromiseOrValue<string>,
    _tokenURI: PromiseOrValue<string>,
    _royaltyFraction: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintingFee(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  recoverTokens(
    _token: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _standard: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceAdminRole(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceMinterRole(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAdminRole(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeMinterRole(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltiesEnabled(overrides?: CallOverrides): Promise<boolean>;

  royaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

  royaltyInfo(
    _tokenId: PromiseOrValue<BigNumberish>,
    _salePrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  royaltyReceiver(overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdminRole(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _newBaseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollectionDescription(
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollectionDisplayPicture(
    _photoURL: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    _newContractURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketplaceAddress(
    _newMarketplaceAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinterRole(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintingFee(
    _newMintingFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenCategory(
    _tokenCategoryEnumIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIdToNFTItem(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, string] & {
      ownerAddress: string;
      creatorAddress: string;
      tokenId: BigNumber;
      createdAt: BigNumber;
      updatedAt: BigNumber;
      tokenURI: string;
    }
  >;

  tokenIdToTokenActivityItem(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, BigNumber, string] & {
      activityType: number;
      fromAddress: string;
      toAddress: string;
      timestamp: BigNumber;
      data: string;
    }
  >;

  tokenMaximumSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenURIExists(
    _tokenURI: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferToFallback(
    _to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    AMOUNT_BELOW_MINTING_FEE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    IMPLEMENTATION_TYPE(overrides?: CallOverrides): Promise<string>;

    INDEX_OUT_OF_BOUNDS(overrides?: CallOverrides): Promise<string>;

    INSUFFICIENT_PERMISSIONS(overrides?: CallOverrides): Promise<string>;

    MAX_SUPPLY_REACHED(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    NOT_APPROVED_OWNER(overrides?: CallOverrides): Promise<string>;

    NO_ADMINS_SPECIFIED(overrides?: CallOverrides): Promise<string>;

    NO_MINTERS_SPECIFIED(overrides?: CallOverrides): Promise<string>;

    TOKEN_DOES_NOT_EXISTS(overrides?: CallOverrides): Promise<string>;

    TOKEN_URI_EXISTS(overrides?: CallOverrides): Promise<string>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

    _tokenCurrentSupply(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveAddressForTokenId(
      _account: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    callFallback(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionDescription(overrides?: CallOverrides): Promise<string>;

    collectionDisplayPicture(overrides?: CallOverrides): Promise<string>;

    collectionItems(
      overrides?: CallOverrides
    ): Promise<ERCStructs.NFTItemStructOutput[]>;

    collectionMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    collectionName(overrides?: CallOverrides): Promise<string>;

    collectionRoyaltiesEnabled(overrides?: CallOverrides): Promise<boolean>;

    collectionSymbol(overrides?: CallOverrides): Promise<string>;

    contractOptionsStruct(
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { pausable: boolean; burnable: boolean }>;

    contractTreasury(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBaseURI(overrides?: CallOverrides): Promise<string>;

    getContractURI(overrides?: CallOverrides): Promise<string>;

    getCreatorTokenCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketplaceAddress(overrides?: CallOverrides): Promise<string>;

    getMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTItem(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ERCStructs.NFTItemStructOutput>;

    getNFTItemFull(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        ERCStructs.NFTItemStructOutput,
        ERCStructs.TokenActivityItemStructOutput[]
      ]
    >;

    getNFTItems(
      overrides?: CallOverrides
    ): Promise<ERCStructs.NFTItemStructOutput[]>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getOwnerTokenCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoyaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyaltyReceiver(overrides?: CallOverrides): Promise<string>;

    getTokenCategory(overrides?: CallOverrides): Promise<number>;

    getTokenCreator(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenCurrentId(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenCurrentSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenMaximumSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenOwner(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenRoyaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ERCStructs.RoyaltyItemStructOutput>;

    getTokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokensCreatedByAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ERCStructs.NFTItemStructOutput[]>;

    getTokensCreatedByMe(
      overrides?: CallOverrides
    ): Promise<ERCStructs.NFTItemStructOutput[]>;

    getTokensOwnedByAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ERCStructs.NFTItemStructOutput[]>;

    getTokensOwnedByMe(
      overrides?: CallOverrides
    ): Promise<ERCStructs.NFTItemStructOutput[]>;

    getWeiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintNewToken(
      _to: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _royaltyFraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    recoverTokens(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _standard: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    royaltiesEnabled(overrides?: CallOverrides): Promise<boolean>;

    royaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    royaltyReceiver(overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(
      _newBaseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionDescription(
      _description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionDisplayPicture(
      _photoURL: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      _newContractURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketplaceAddress(
      _newMarketplaceAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingFee(
      _newMintingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenCategory(
      _tokenCategoryEnumIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToNFTItem(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, string] & {
        ownerAddress: string;
        creatorAddress: string;
        tokenId: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        tokenURI: string;
      }
    >;

    tokenIdToTokenActivityItem(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber, string] & {
        activityType: number;
        fromAddress: string;
        toAddress: string;
        timestamp: BigNumber;
        data: string;
      }
    >;

    tokenMaximumSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenURIExists(
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToFallback(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BaseURIChanged(string)"(newURI?: null): BaseURIChangedEventFilter;
    BaseURIChanged(newURI?: null): BaseURIChangedEventFilter;

    "CollectionDescriptionChanged(string)"(
      description?: null
    ): CollectionDescriptionChangedEventFilter;
    CollectionDescriptionChanged(
      description?: null
    ): CollectionDescriptionChangedEventFilter;

    "CollectionDisplayPictureChanged(string)"(
      photoURL?: null
    ): CollectionDisplayPictureChangedEventFilter;
    CollectionDisplayPictureChanged(
      photoURL?: null
    ): CollectionDisplayPictureChangedEventFilter;

    "ContractURIChanged(string)"(newURI?: null): ContractURIChangedEventFilter;
    ContractURIChanged(newURI?: null): ContractURIChangedEventFilter;

    "Log(string,uint256)"(func?: null, gas?: null): LogEventFilter;
    Log(func?: null, gas?: null): LogEventFilter;

    "MarketplaceAddressChanged(address)"(
      newMarketplaceAddress?: null
    ): MarketplaceAddressChangedEventFilter;
    MarketplaceAddressChanged(
      newMarketplaceAddress?: null
    ): MarketplaceAddressChangedEventFilter;

    "MarketplaceAddressForTokenChanged(address,uint256)"(
      newMarketplaceAddress?: null,
      tokenId?: null
    ): MarketplaceAddressForTokenChangedEventFilter;
    MarketplaceAddressForTokenChanged(
      newMarketplaceAddress?: null,
      tokenId?: null
    ): MarketplaceAddressForTokenChangedEventFilter;

    "MintingFeeChanged(uint256)"(
      newMintingFee?: null
    ): MintingFeeChangedEventFilter;
    MintingFeeChanged(newMintingFee?: null): MintingFeeChangedEventFilter;

    "OwnerChanged(address)"(newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(newOwner?: null): OwnerChangedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Received(address,uint256)"(arg0?: null, arg1?: null): ReceivedEventFilter;
    Received(arg0?: null, arg1?: null): ReceivedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "TokenBurned(address,address,uint256,uint256,string)"(
      creator?: null,
      burner?: null,
      burnedTokenId?: PromiseOrValue<BigNumberish> | null,
      batchSize?: null,
      burnedTokenURI?: null
    ): TokenBurnedEventFilter;
    TokenBurned(
      creator?: null,
      burner?: null,
      burnedTokenId?: PromiseOrValue<BigNumberish> | null,
      batchSize?: null,
      burnedTokenURI?: null
    ): TokenBurnedEventFilter;

    "TokenCategoryChanged(uint8)"(
      newTokenCategotyIndex?: null
    ): TokenCategoryChangedEventFilter;
    TokenCategoryChanged(
      newTokenCategotyIndex?: null
    ): TokenCategoryChangedEventFilter;

    "TokenMinted(address,address,uint256,uint256,string,tuple)"(
      creator?: null,
      minter?: null,
      newTokenId?: PromiseOrValue<BigNumberish> | null,
      batchSize?: null,
      newTokenURI?: null,
      newToken?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      creator?: null,
      minter?: null,
      newTokenId?: PromiseOrValue<BigNumberish> | null,
      batchSize?: null,
      newTokenURI?: null,
      newToken?: null
    ): TokenMintedEventFilter;

    "TokenTransfered(address,address,uint256,uint256,string,tuple)"(
      creator?: null,
      burner?: null,
      transferedTokenId?: PromiseOrValue<BigNumberish> | null,
      batchSize?: null,
      transferedTokenURI?: null,
      trandferedToken?: null
    ): TokenTransferedEventFilter;
    TokenTransfered(
      creator?: null,
      burner?: null,
      transferedTokenId?: PromiseOrValue<BigNumberish> | null,
      batchSize?: null,
      transferedTokenURI?: null,
      trandferedToken?: null
    ): TokenTransferedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    AMOUNT_BELOW_MINTING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    IMPLEMENTATION_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_OUT_OF_BOUNDS(overrides?: CallOverrides): Promise<BigNumber>;

    INSUFFICIENT_PERMISSIONS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SUPPLY_REACHED(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    NOT_APPROVED_OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    NO_ADMINS_SPECIFIED(overrides?: CallOverrides): Promise<BigNumber>;

    NO_MINTERS_SPECIFIED(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_DOES_NOT_EXISTS(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_URI_EXISTS(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenCurrentSupply(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveAddressForTokenId(
      _account: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callFallback(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectionDescription(overrides?: CallOverrides): Promise<BigNumber>;

    collectionDisplayPicture(overrides?: CallOverrides): Promise<BigNumber>;

    collectionItems(overrides?: CallOverrides): Promise<BigNumber>;

    collectionMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    collectionName(overrides?: CallOverrides): Promise<BigNumber>;

    collectionRoyaltiesEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    collectionSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    contractOptionsStruct(overrides?: CallOverrides): Promise<BigNumber>;

    contractTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseURI(overrides?: CallOverrides): Promise<BigNumber>;

    getContractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatorTokenCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketplaceAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTItem(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTItemFull(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTItems(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerTokenCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyaltyReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenCategory(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenCreator(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenCurrentId(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenCurrentSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenMaximumSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenMintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenOwner(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenRoyaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensCreatedByAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensCreatedByMe(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensOwnedByAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensOwnedByMe(overrides?: CallOverrides): Promise<BigNumber>;

    getWeiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNewToken(
      _to: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _royaltyFraction: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    recoverTokens(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _standard: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltiesEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltyReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _newBaseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollectionDescription(
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollectionDisplayPicture(
      _photoURL: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractURI(
      _newContractURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketplaceAddress(
      _newMarketplaceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintingFee(
      _newMintingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenCategory(
      _tokenCategoryEnumIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToNFTItem(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToTokenActivityItem(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMaximumSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURIExists(
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferToFallback(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AMOUNT_BELOW_MINTING_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IMPLEMENTATION_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INDEX_OUT_OF_BOUNDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INSUFFICIENT_PERMISSIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SUPPLY_REACHED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NOT_APPROVED_OWNER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NO_ADMINS_SPECIFIED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NO_MINTERS_SPECIFIED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_DOES_NOT_EXISTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_URI_EXISTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _tokenCurrentSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _tokenIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveAddressForTokenId(
      _account: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callFallback(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectionDescription(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionDisplayPicture(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionMaxSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionRoyaltiesEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractOptionsStruct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreatorTokenCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketplaceAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTItem(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTItemFull(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwnerTokenCount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyFraction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenCategory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenCreator(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenCurrentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenCurrentSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenMaximumSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenMintingFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenOwner(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenRoyaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensCreatedByAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensCreatedByMe(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensOwnedByAddress(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensOwnedByMe(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeiBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintNewToken(
      _to: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      _royaltyFraction: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverTokens(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _standard: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltiesEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyInfo(
      _tokenId: PromiseOrValue<BigNumberish>,
      _salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltyReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _newBaseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionDescription(
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionDisplayPicture(
      _photoURL: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      _newContractURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketplaceAddress(
      _newMarketplaceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinterRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintingFee(
      _newMintingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenCategory(
      _tokenCategoryEnumIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToNFTItem(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToTokenActivityItem(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenMaximumSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURIExists(
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferToFallback(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
