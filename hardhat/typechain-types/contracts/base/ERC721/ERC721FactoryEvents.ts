/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ERC721FactoryEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "BaseURIChanged(string)": EventFragment;
    "CollectionDescriptionChanged(string)": EventFragment;
    "CollectionDisplayPictureChanged(string)": EventFragment;
    "ContractURIChanged(string)": EventFragment;
    "MarketplaceAddressChanged(address)": EventFragment;
    "MarketplaceAddressForTokenChanged(address,uint256)": EventFragment;
    "MintingFeeChanged(uint256)": EventFragment;
    "OwnerChanged(address)": EventFragment;
    "TokenMinted(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseURIChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollectionDescriptionChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollectionDisplayPictureChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketplaceAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MarketplaceAddressForTokenChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
}

export interface BaseURIChangedEventObject {
  newURI: string;
}
export type BaseURIChangedEvent = TypedEvent<
  [string],
  BaseURIChangedEventObject
>;

export type BaseURIChangedEventFilter = TypedEventFilter<BaseURIChangedEvent>;

export interface CollectionDescriptionChangedEventObject {
  description: string;
}
export type CollectionDescriptionChangedEvent = TypedEvent<
  [string],
  CollectionDescriptionChangedEventObject
>;

export type CollectionDescriptionChangedEventFilter =
  TypedEventFilter<CollectionDescriptionChangedEvent>;

export interface CollectionDisplayPictureChangedEventObject {
  photoURL: string;
}
export type CollectionDisplayPictureChangedEvent = TypedEvent<
  [string],
  CollectionDisplayPictureChangedEventObject
>;

export type CollectionDisplayPictureChangedEventFilter =
  TypedEventFilter<CollectionDisplayPictureChangedEvent>;

export interface ContractURIChangedEventObject {
  newURI: string;
}
export type ContractURIChangedEvent = TypedEvent<
  [string],
  ContractURIChangedEventObject
>;

export type ContractURIChangedEventFilter =
  TypedEventFilter<ContractURIChangedEvent>;

export interface MarketplaceAddressChangedEventObject {
  newMarketplaceAddress: string;
}
export type MarketplaceAddressChangedEvent = TypedEvent<
  [string],
  MarketplaceAddressChangedEventObject
>;

export type MarketplaceAddressChangedEventFilter =
  TypedEventFilter<MarketplaceAddressChangedEvent>;

export interface MarketplaceAddressForTokenChangedEventObject {
  newMarketplaceAddress: string;
  tokenId: BigNumber;
}
export type MarketplaceAddressForTokenChangedEvent = TypedEvent<
  [string, BigNumber],
  MarketplaceAddressForTokenChangedEventObject
>;

export type MarketplaceAddressForTokenChangedEventFilter =
  TypedEventFilter<MarketplaceAddressForTokenChangedEvent>;

export interface MintingFeeChangedEventObject {
  newMintingFee: BigNumber;
}
export type MintingFeeChangedEvent = TypedEvent<
  [BigNumber],
  MintingFeeChangedEventObject
>;

export type MintingFeeChangedEventFilter =
  TypedEventFilter<MintingFeeChangedEvent>;

export interface OwnerChangedEventObject {
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface TokenMintedEventObject {
  creator: string;
  newTokenId: BigNumber;
  newTokenURI: string;
}
export type TokenMintedEvent = TypedEvent<
  [string, BigNumber, string],
  TokenMintedEventObject
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export interface ERC721FactoryEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721FactoryEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BaseURIChanged(string)"(newURI?: null): BaseURIChangedEventFilter;
    BaseURIChanged(newURI?: null): BaseURIChangedEventFilter;

    "CollectionDescriptionChanged(string)"(
      description?: null
    ): CollectionDescriptionChangedEventFilter;
    CollectionDescriptionChanged(
      description?: null
    ): CollectionDescriptionChangedEventFilter;

    "CollectionDisplayPictureChanged(string)"(
      photoURL?: null
    ): CollectionDisplayPictureChangedEventFilter;
    CollectionDisplayPictureChanged(
      photoURL?: null
    ): CollectionDisplayPictureChangedEventFilter;

    "ContractURIChanged(string)"(newURI?: null): ContractURIChangedEventFilter;
    ContractURIChanged(newURI?: null): ContractURIChangedEventFilter;

    "MarketplaceAddressChanged(address)"(
      newMarketplaceAddress?: null
    ): MarketplaceAddressChangedEventFilter;
    MarketplaceAddressChanged(
      newMarketplaceAddress?: null
    ): MarketplaceAddressChangedEventFilter;

    "MarketplaceAddressForTokenChanged(address,uint256)"(
      newMarketplaceAddress?: null,
      tokenId?: null
    ): MarketplaceAddressForTokenChangedEventFilter;
    MarketplaceAddressForTokenChanged(
      newMarketplaceAddress?: null,
      tokenId?: null
    ): MarketplaceAddressForTokenChangedEventFilter;

    "MintingFeeChanged(uint256)"(
      newMintingFee?: null
    ): MintingFeeChangedEventFilter;
    MintingFeeChanged(newMintingFee?: null): MintingFeeChangedEventFilter;

    "OwnerChanged(address)"(newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(newOwner?: null): OwnerChangedEventFilter;

    "TokenMinted(address,uint256,string)"(
      creator?: null,
      newTokenId?: PromiseOrValue<BigNumberish> | null,
      newTokenURI?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      creator?: null,
      newTokenId?: PromiseOrValue<BigNumberish> | null,
      newTokenURI?: null
    ): TokenMintedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
