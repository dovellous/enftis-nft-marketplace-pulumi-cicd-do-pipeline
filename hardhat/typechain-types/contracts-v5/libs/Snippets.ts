/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Structs {
  export type NFTItemStruct = {
    minterAddress: AddressLike;
    creatorAddress: [AddressLike, AddressLike];
    ownerAddress: AddressLike;
    tokenId: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type NFTItemStructOutput = [
    minterAddress: string,
    creatorAddress: [string, string],
    ownerAddress: string,
    tokenId: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    minterAddress: string;
    creatorAddress: [string, string];
    ownerAddress: string;
    tokenId: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type NFTMarketItemStruct = {
    tokenInterfaceId: BytesLike;
    sold: boolean;
    isListed: boolean;
    isAuction: boolean;
    supportsRoyalties: boolean;
    tokenContractAddress: AddressLike;
    creatorSellerOwner: [AddressLike, AddressLike, AddressLike];
    price: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    tokenId: BigNumberish;
    tokenIndexedID: BigNumberish;
  };

  export type NFTMarketItemStructOutput = [
    tokenInterfaceId: string,
    sold: boolean,
    isListed: boolean,
    isAuction: boolean,
    supportsRoyalties: boolean,
    tokenContractAddress: string,
    creatorSellerOwner: [string, string, string],
    price: bigint,
    createdAt: bigint,
    updatedAt: bigint,
    tokenId: bigint,
    tokenIndexedID: bigint
  ] & {
    tokenInterfaceId: string;
    sold: boolean;
    isListed: boolean;
    isAuction: boolean;
    supportsRoyalties: boolean;
    tokenContractAddress: string;
    creatorSellerOwner: [string, string, string];
    price: bigint;
    createdAt: bigint;
    updatedAt: bigint;
    tokenId: bigint;
    tokenIndexedID: bigint;
  };
}

export interface SnippetsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADDRESS"
      | "ADMIN_ROLE"
      | "BASE_EXTENSION"
      | "CREATED_AFTER"
      | "CREATED_AT"
      | "CREATED_BEFORE"
      | "CREATOR"
      | "ERC1155INTERFACE"
      | "ERC20INTERFACE"
      | "ERC2981INTERFACE"
      | "ERC721INTERFACE"
      | "IPFS_PREFIX"
      | "MINTER"
      | "MINTER_ROLE"
      | "OWNER"
      | "PAUSER_ROLE"
      | "SELLER"
      | "SNAPSHOT_ROLE"
      | "STRING"
      | "TIMESTAMP"
      | "TOKEN_ID"
      | "TOKEN_URI"
      | "UINT256"
      | "UPDATED_AFTER"
      | "UPDATED_AT"
      | "UPDATED_BEFORE"
      | "bytes32String"
      | "compareStrings"
      | "generateRandomHash"
      | "generateRandomNumber"
      | "getBaseURI"
      | "getTokenURIFromID"
      | "getTokenURIFromURI"
      | "msgSender"
      | "searchHasMatch"
      | "searchNFTMarketItemHasMatch"
      | "searchString"
      | "stringBytes32"
      | "stringContains"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ADDRESS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_EXTENSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATED_AFTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATED_AT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATED_BEFORE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CREATOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ERC1155INTERFACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20INTERFACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC2981INTERFACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721INTERFACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IPFS_PREFIX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MINTER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SELLER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SNAPSHOT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "STRING", values?: undefined): string;
  encodeFunctionData(functionFragment: "TIMESTAMP", values?: undefined): string;
  encodeFunctionData(functionFragment: "TOKEN_ID", values?: undefined): string;
  encodeFunctionData(functionFragment: "TOKEN_URI", values?: undefined): string;
  encodeFunctionData(functionFragment: "UINT256", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPDATED_AFTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATED_AT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATED_BEFORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32String",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compareStrings",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandomHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandomNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokenURIFromID",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURIFromURI",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "msgSender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "searchHasMatch",
    values: [BytesLike, BytesLike, Structs.NFTItemStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "searchNFTMarketItemHasMatch",
    values: [BytesLike, BytesLike, Structs.NFTMarketItemStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "searchString",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stringBytes32",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stringContains",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "ADDRESS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BASE_EXTENSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATED_AFTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CREATED_AT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CREATED_BEFORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CREATOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ERC1155INTERFACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC20INTERFACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC2981INTERFACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721INTERFACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IPFS_PREFIX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MINTER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SELLER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SNAPSHOT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STRING", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TIMESTAMP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOKEN_ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOKEN_URI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UINT256", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPDATED_AFTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UPDATED_AT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPDATED_BEFORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32String",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compareStrings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRandomHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURIFromID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURIFromURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "msgSender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "searchHasMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchNFTMarketItemHasMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringContains",
    data: BytesLike
  ): Result;
}

export interface Snippets extends BaseContract {
  connect(runner?: ContractRunner | null): Snippets;
  waitForDeployment(): Promise<this>;

  interface: SnippetsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADDRESS: TypedContractMethod<[], [string], "view">;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BASE_EXTENSION: TypedContractMethod<[], [string], "view">;

  CREATED_AFTER: TypedContractMethod<[], [string], "view">;

  CREATED_AT: TypedContractMethod<[], [string], "view">;

  CREATED_BEFORE: TypedContractMethod<[], [string], "view">;

  CREATOR: TypedContractMethod<[], [string], "view">;

  ERC1155INTERFACE: TypedContractMethod<[], [string], "view">;

  ERC20INTERFACE: TypedContractMethod<[], [string], "view">;

  ERC2981INTERFACE: TypedContractMethod<[], [string], "view">;

  ERC721INTERFACE: TypedContractMethod<[], [string], "view">;

  IPFS_PREFIX: TypedContractMethod<[], [string], "view">;

  MINTER: TypedContractMethod<[], [string], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  SELLER: TypedContractMethod<[], [string], "view">;

  SNAPSHOT_ROLE: TypedContractMethod<[], [string], "view">;

  STRING: TypedContractMethod<[], [string], "view">;

  TIMESTAMP: TypedContractMethod<[], [string], "view">;

  TOKEN_ID: TypedContractMethod<[], [string], "view">;

  TOKEN_URI: TypedContractMethod<[], [string], "view">;

  UINT256: TypedContractMethod<[], [string], "view">;

  UPDATED_AFTER: TypedContractMethod<[], [string], "view">;

  UPDATED_AT: TypedContractMethod<[], [string], "view">;

  UPDATED_BEFORE: TypedContractMethod<[], [string], "view">;

  bytes32String: TypedContractMethod<[_bytes32: BytesLike], [string], "view">;

  compareStrings: TypedContractMethod<
    [a: string, b: string],
    [boolean],
    "view"
  >;

  generateRandomHash: TypedContractMethod<
    [seed: BigNumberish],
    [string],
    "view"
  >;

  generateRandomNumber: TypedContractMethod<
    [seed: BigNumberish],
    [bigint],
    "view"
  >;

  getBaseURI: TypedContractMethod<[baseURI: string], [string], "view">;

  getTokenURIFromID: TypedContractMethod<
    [tokenId: BigNumberish, baseURI: string, tokenURI: string],
    [string],
    "view"
  >;

  getTokenURIFromURI: TypedContractMethod<
    [baseURI: string, _tokenURI: string],
    [string],
    "view"
  >;

  msgSender: TypedContractMethod<[], [string], "view">;

  searchHasMatch: TypedContractMethod<
    [
      _itemKey: BytesLike,
      _data: BytesLike,
      _nftItem: Structs.NFTItemStruct,
      _tokenURIString: string
    ],
    [boolean],
    "view"
  >;

  searchNFTMarketItemHasMatch: TypedContractMethod<
    [
      _itemKey: BytesLike,
      _data: BytesLike,
      _nftItem: Structs.NFTMarketItemStruct
    ],
    [boolean],
    "view"
  >;

  searchString: TypedContractMethod<
    [_self: string, _needle: string],
    [boolean],
    "view"
  >;

  stringBytes32: TypedContractMethod<[source: string], [string], "view">;

  stringContains: TypedContractMethod<
    [what: string, where: string],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASE_EXTENSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CREATED_AFTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CREATED_AT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CREATED_BEFORE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CREATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ERC1155INTERFACE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ERC20INTERFACE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ERC2981INTERFACE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ERC721INTERFACE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IPFS_PREFIX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OWNER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SELLER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SNAPSHOT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STRING"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TIMESTAMP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOKEN_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOKEN_URI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UINT256"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPDATED_AFTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPDATED_AT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPDATED_BEFORE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bytes32String"
  ): TypedContractMethod<[_bytes32: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "compareStrings"
  ): TypedContractMethod<[a: string, b: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "generateRandomHash"
  ): TypedContractMethod<[seed: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "generateRandomNumber"
  ): TypedContractMethod<[seed: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBaseURI"
  ): TypedContractMethod<[baseURI: string], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenURIFromID"
  ): TypedContractMethod<
    [tokenId: BigNumberish, baseURI: string, tokenURI: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenURIFromURI"
  ): TypedContractMethod<
    [baseURI: string, _tokenURI: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "msgSender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "searchHasMatch"
  ): TypedContractMethod<
    [
      _itemKey: BytesLike,
      _data: BytesLike,
      _nftItem: Structs.NFTItemStruct,
      _tokenURIString: string
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchNFTMarketItemHasMatch"
  ): TypedContractMethod<
    [
      _itemKey: BytesLike,
      _data: BytesLike,
      _nftItem: Structs.NFTMarketItemStruct
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchString"
  ): TypedContractMethod<[_self: string, _needle: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "stringBytes32"
  ): TypedContractMethod<[source: string], [string], "view">;
  getFunction(
    nameOrSignature: "stringContains"
  ): TypedContractMethod<[what: string, where: string], [boolean], "view">;

  filters: {};
}
