/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Structs {
  export type NFTItemStruct = {
    minterAddress: AddressLike;
    creatorAddress: [AddressLike, AddressLike];
    ownerAddress: AddressLike;
    tokenId: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type NFTItemStructOutput = [
    minterAddress: string,
    creatorAddress: [string, string],
    ownerAddress: string,
    tokenId: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    minterAddress: string;
    creatorAddress: [string, string];
    ownerAddress: string;
    tokenId: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type NFTStruct = { nftItem: Structs.NFTItemStruct; tokenURI: string };

  export type NFTStructOutput = [
    nftItem: Structs.NFTItemStructOutput,
    tokenURI: string
  ] & { nftItem: Structs.NFTItemStructOutput; tokenURI: string };

  export type TokenActivityItemStruct = {
    activityType: BigNumberish;
    fromAddress: AddressLike;
    toAddress: AddressLike;
    timestamp: BigNumberish;
  };

  export type TokenActivityItemStructOutput = [
    activityType: bigint,
    fromAddress: string,
    toAddress: string,
    timestamp: bigint
  ] & {
    activityType: bigint;
    fromAddress: string;
    toAddress: string;
    timestamp: bigint;
  };

  export type RoyaltyItemStruct = {
    royaltyIsDefined: boolean;
    royaltyReceiver: AddressLike;
    royaltyFraction: BigNumberish;
    royaltyAmount: BigNumberish;
    tokenPrice: BigNumberish;
    tokenId: BigNumberish;
  };

  export type RoyaltyItemStructOutput = [
    royaltyIsDefined: boolean,
    royaltyReceiver: string,
    royaltyFraction: bigint,
    royaltyAmount: bigint,
    tokenPrice: bigint,
    tokenId: bigint
  ] & {
    royaltyIsDefined: boolean;
    royaltyReceiver: string;
    royaltyFraction: bigint;
    royaltyAmount: bigint;
    tokenPrice: bigint;
    tokenId: bigint;
  };
}

export interface ERC721FactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "_exists"
      | "_tokenCurrentSupply"
      | "_tokenIdCounter"
      | "approve"
      | "approveAddressForToken"
      | "balanceOf"
      | "bannerURL"
      | "baseTokenURI"
      | "burn"
      | "burnToken"
      | "callFallback"
      | "collectionBannerMedia"
      | "collectionCategory"
      | "collectionDescription"
      | "collectionDisplayPicture"
      | "collectionName"
      | "collectionSymbol"
      | "contractOptionIsBurnable"
      | "contractOptionIsMintable"
      | "contractOptionIsPausable"
      | "contractOptionIsSnapshotable"
      | "contractTreasury"
      | "contractURI"
      | "description"
      | "disableRoyaltiesUntil"
      | "getAccountTokenBalance"
      | "getApproved"
      | "getBaseURI"
      | "getContractURI"
      | "getMarketplaceAddress"
      | "getNFTItem"
      | "getNFTItems"
      | "getOwner"
      | "getRoleAdmin"
      | "getRoyaltyFeeDenominator"
      | "getRoyaltyFraction"
      | "getRoyaltyReceiver"
      | "getTokenAuditTrail"
      | "getTokenCreator"
      | "getTokenCurrentId"
      | "getTokenCurrentSupply"
      | "getTokenMaximumSupply"
      | "getTokenMintee"
      | "getTokenMinter"
      | "getTokenMintingFee"
      | "getTokenOwner"
      | "getTokenRoyaltyInfo"
      | "getTokenURI"
      | "getTokensCreatedByAddress"
      | "getTokensCreatedByMe"
      | "getTokensMintedByAddress"
      | "getTokensMintedByMe"
      | "getTokensOwnedByAddress"
      | "getTokensOwnedByMe"
      | "grantAdminRole"
      | "grantMinterRole"
      | "grantRole"
      | "hasRole"
      | "isApprovedForAll"
      | "loggerAddress"
      | "marketplaceAddress"
      | "mintNewToken"
      | "mintingFee"
      | "name"
      | "owner"
      | "ownerOf"
      | "pause"
      | "paused"
      | "photoURL"
      | "recoverTokens"
      | "renounceAdminRole"
      | "renounceContractOwnership"
      | "renounceMinterRole"
      | "renounceRole"
      | "revokeAdminRole"
      | "revokeMinterRole"
      | "revokeRole"
      | "royaltiesDisabledUntil"
      | "royaltyFraction"
      | "royaltyInfo"
      | "royaltyReceiver"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "searchAddress"
      | "searchTimestamp"
      | "searchTokenId"
      | "searchTokenURI"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setCollectionBannerMedia"
      | "setCollectionDescription"
      | "setCollectionDisplayPicture"
      | "setContractURI"
      | "setLoggerAddress"
      | "setMarketplaceAddress"
      | "setMintingFee"
      | "setNewOwner"
      | "setRoyalties"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenCategory"
      | "tokenIdToNFTItem"
      | "tokenMaximumSupply"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "tokenURIExists"
      | "totalSupply"
      | "transferFrom"
      | "transferToFallback"
      | "transferToken"
      | "unpause"
      | "updateContractTreasury"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "ApprovedAddressForTokenChanged"
      | "BaseURIChanged"
      | "BatchMetadataUpdate"
      | "CollectionBannerMediaChanged"
      | "CollectionDescriptionChanged"
      | "CollectionDisplayPictureChanged"
      | "ContractURIChanged"
      | "Log"
      | "MarketplaceAddressChanged"
      | "MetadataUpdate"
      | "MintingFeeChanged"
      | "OwnerChanged"
      | "Paused"
      | "Received"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoyaltiesChanged"
      | "RoyaltiesDisabled"
      | "RoyaltiesEnabled"
      | "TokenBurned"
      | "TokenMinted"
      | "TokenTransfered"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenCurrentSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAddressForToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bannerURL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callFallback",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionBannerMedia",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionCategory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionDescription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionDisplayPicture",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractOptionIsBurnable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractOptionIsMintable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractOptionIsPausable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractOptionIsSnapshotable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableRoyaltiesUntil",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketplaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTItems",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyFeeDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAuditTrail",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCreator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCurrentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCurrentSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMaximumSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMintee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMinter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRoyaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensCreatedByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensCreatedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensMintedByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensMintedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOwnedByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOwnedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantMinterRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loggerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewToken",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "photoURL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverTokens",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceContractOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinterRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMinterRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltiesDisabledUntil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "searchAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "searchTimestamp",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "searchTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "searchTokenURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCollectionBannerMedia",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionDescription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionDisplayPicture",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoggerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplaceAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalties",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCategory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToNFTItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMaximumSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURIExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToFallback",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateContractTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_tokenCurrentSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_tokenIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAddressForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bannerURL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionBannerMedia",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionDisplayPicture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOptionIsBurnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOptionIsMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOptionIsPausable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOptionIsSnapshotable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableRoyaltiesUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFTItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNFTItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyFeeDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAuditTrail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCurrentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCurrentSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMaximumSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMintee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensCreatedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensCreatedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensMintedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensMintedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOwnedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOwnedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loggerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "photoURL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceContractOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltiesDisabledUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionBannerMedia",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionDisplayPicture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoggerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToNFTItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMaximumSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenURIExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateContractTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovedAddressForTokenChangedEvent {
  export type InputTuple = [
    approvedAddress: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [approvedAddress: string, tokenId: bigint];
  export interface OutputObject {
    approvedAddress: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseURIChangedEvent {
  export type InputTuple = [newURI: string];
  export type OutputTuple = [newURI: string];
  export interface OutputObject {
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionBannerMediaChangedEvent {
  export type InputTuple = [bannerURL: string];
  export type OutputTuple = [bannerURL: string];
  export interface OutputObject {
    bannerURL: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionDescriptionChangedEvent {
  export type InputTuple = [description: string];
  export type OutputTuple = [description: string];
  export interface OutputObject {
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionDisplayPictureChangedEvent {
  export type InputTuple = [photoURL: string];
  export type OutputTuple = [photoURL: string];
  export interface OutputObject {
    photoURL: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractURIChangedEvent {
  export type InputTuple = [newURI: BytesLike];
  export type OutputTuple = [newURI: string];
  export interface OutputObject {
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogEvent {
  export type InputTuple = [func: string, gas: BigNumberish];
  export type OutputTuple = [func: string, gas: bigint];
  export interface OutputObject {
    func: string;
    gas: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketplaceAddressChangedEvent {
  export type InputTuple = [newMarketplaceAddress: AddressLike];
  export type OutputTuple = [newMarketplaceAddress: string];
  export interface OutputObject {
    newMarketplaceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintingFeeChangedEvent {
  export type InputTuple = [newMintingFee: BigNumberish];
  export type OutputTuple = [newMintingFee: bigint];
  export interface OutputObject {
    newMintingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedEvent {
  export type InputTuple = [arg0: AddressLike, arg1: BigNumberish];
  export type OutputTuple = [arg0: string, arg1: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltiesChangedEvent {
  export type InputTuple = [
    _royaltyReceiver: AddressLike,
    _royaltyFraction: BigNumberish,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [
    _royaltyReceiver: string,
    _royaltyFraction: bigint,
    _tokenId: bigint
  ];
  export interface OutputObject {
    _royaltyReceiver: string;
    _royaltyFraction: bigint;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltiesDisabledEvent {
  export type InputTuple = [_timestamp: BigNumberish];
  export type OutputTuple = [_timestamp: bigint];
  export interface OutputObject {
    _timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltiesEnabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenBurnedEvent {
  export type InputTuple = [
    creator: AddressLike,
    burner: AddressLike,
    burnedTokenId: BigNumberish,
    batchSize: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    burner: string,
    burnedTokenId: bigint,
    batchSize: bigint
  ];
  export interface OutputObject {
    creator: string;
    burner: string;
    burnedTokenId: bigint;
    batchSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenMintedEvent {
  export type InputTuple = [
    creator: AddressLike,
    minter: AddressLike,
    newTokenId: BigNumberish,
    batchSize: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    minter: string,
    newTokenId: bigint,
    batchSize: bigint
  ];
  export interface OutputObject {
    creator: string;
    minter: string;
    newTokenId: bigint;
    batchSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTransferedEvent {
  export type InputTuple = [
    creator: AddressLike,
    burner: AddressLike,
    transferedTokenId: BigNumberish,
    batchSize: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    burner: string,
    transferedTokenId: bigint,
    batchSize: bigint
  ];
  export interface OutputObject {
    creator: string;
    burner: string;
    transferedTokenId: bigint;
    batchSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC721Factory extends BaseContract {
  connect(runner?: ContractRunner | null): ERC721Factory;
  waitForDeployment(): Promise<this>;

  interface: ERC721FactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  _exists: TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;

  _tokenCurrentSupply: TypedContractMethod<[], [bigint], "view">;

  _tokenIdCounter: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveAddressForToken: TypedContractMethod<
    [_account: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  bannerURL: TypedContractMethod<[], [string], "view">;

  baseTokenURI: TypedContractMethod<[], [string], "view">;

  burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  burnToken: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  callFallback: TypedContractMethod<[_to: AddressLike], [void], "payable">;

  collectionBannerMedia: TypedContractMethod<[], [string], "view">;

  collectionCategory: TypedContractMethod<[], [bigint], "view">;

  collectionDescription: TypedContractMethod<[], [string], "view">;

  collectionDisplayPicture: TypedContractMethod<[], [string], "view">;

  collectionName: TypedContractMethod<[], [string], "view">;

  collectionSymbol: TypedContractMethod<[], [string], "view">;

  contractOptionIsBurnable: TypedContractMethod<[], [boolean], "view">;

  contractOptionIsMintable: TypedContractMethod<[], [boolean], "view">;

  contractOptionIsPausable: TypedContractMethod<[], [boolean], "view">;

  contractOptionIsSnapshotable: TypedContractMethod<[], [boolean], "view">;

  contractTreasury: TypedContractMethod<[], [string], "view">;

  contractURI: TypedContractMethod<[], [string], "view">;

  description: TypedContractMethod<[], [string], "view">;

  disableRoyaltiesUntil: TypedContractMethod<
    [_timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAccountTokenBalance: TypedContractMethod<
    [_account: AddressLike],
    [bigint],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getBaseURI: TypedContractMethod<[], [string], "view">;

  getContractURI: TypedContractMethod<[], [string], "view">;

  getMarketplaceAddress: TypedContractMethod<[], [string], "view">;

  getNFTItem: TypedContractMethod<
    [_tokenId: BigNumberish],
    [[Structs.NFTItemStructOutput, string]],
    "view"
  >;

  getNFTItems: TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoyaltyFeeDenominator: TypedContractMethod<[], [bigint], "view">;

  getRoyaltyFraction: TypedContractMethod<[], [bigint], "view">;

  getRoyaltyReceiver: TypedContractMethod<[], [string], "view">;

  getTokenAuditTrail: TypedContractMethod<
    [_tokenId: BigNumberish],
    [Structs.TokenActivityItemStructOutput[]],
    "nonpayable"
  >;

  getTokenCreator: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenCurrentId: TypedContractMethod<[], [bigint], "view">;

  getTokenCurrentSupply: TypedContractMethod<[], [bigint], "view">;

  getTokenMaximumSupply: TypedContractMethod<[], [bigint], "view">;

  getTokenMintee: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenMinter: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenMintingFee: TypedContractMethod<[], [bigint], "view">;

  getTokenOwner: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenRoyaltyInfo: TypedContractMethod<
    [_tokenId: BigNumberish, _tokenPrice: BigNumberish],
    [Structs.RoyaltyItemStructOutput],
    "view"
  >;

  getTokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  getTokensCreatedByAddress: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensCreatedByMe: TypedContractMethod<
    [],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensMintedByAddress: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensMintedByMe: TypedContractMethod<
    [],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensOwnedByAddress: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensOwnedByMe: TypedContractMethod<
    [],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  grantAdminRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantMinterRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  loggerAddress: TypedContractMethod<[], [string], "view">;

  marketplaceAddress: TypedContractMethod<[], [string], "view">;

  mintNewToken: TypedContractMethod<
    [_to: AddressLike, _tokenURI: string, _royaltyFraction: BigNumberish],
    [bigint],
    "payable"
  >;

  mintingFee: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  photoURL: TypedContractMethod<[], [string], "view">;

  recoverTokens: TypedContractMethod<
    [
      _token: AddressLike,
      _account: AddressLike,
      _standard: BigNumberish,
      _amount: BigNumberish,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceAdminRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceContractOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceMinterRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAdminRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeMinterRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltiesDisabledUntil: TypedContractMethod<[], [bigint], "view">;

  royaltyFraction: TypedContractMethod<[], [bigint], "view">;

  royaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  royaltyReceiver: TypedContractMethod<[], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  searchAddress: TypedContractMethod<
    [_itemKey: BytesLike, _address: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  searchTimestamp: TypedContractMethod<
    [_itemKey: BytesLike, _uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  searchTokenId: TypedContractMethod<
    [_uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  searchTokenURI: TypedContractMethod<
    [_string: string],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;

  setCollectionBannerMedia: TypedContractMethod<
    [_bannerURL: string],
    [void],
    "nonpayable"
  >;

  setCollectionDescription: TypedContractMethod<
    [_description: string],
    [void],
    "nonpayable"
  >;

  setCollectionDisplayPicture: TypedContractMethod<
    [_photoURL: string],
    [void],
    "nonpayable"
  >;

  setContractURI: TypedContractMethod<
    [_newContractURI: BytesLike],
    [void],
    "nonpayable"
  >;

  setLoggerAddress: TypedContractMethod<
    [_logger: AddressLike],
    [void],
    "nonpayable"
  >;

  setMarketplaceAddress: TypedContractMethod<
    [_newMarketplaceAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setMintingFee: TypedContractMethod<
    [_newMintingFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNewOwner: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setRoyalties: TypedContractMethod<
    [
      _royaltyReceiver: AddressLike,
      _royaltyFraction: BigNumberish,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenCategory: TypedContractMethod<[], [bigint], "view">;

  tokenIdToNFTItem: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        minterAddress: string;
        ownerAddress: string;
        tokenId: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  tokenMaximumSupply: TypedContractMethod<[], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  tokenURIExists: TypedContractMethod<[_tokenURI: string], [boolean], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferToFallback: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "payable"
  >;

  transferToken: TypedContractMethod<
    [_to: AddressLike, _tokenId: BigNumberish, _from: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateContractTreasury: TypedContractMethod<
    [_newContractTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_exists"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "_tokenCurrentSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_tokenIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveAddressForToken"
  ): TypedContractMethod<
    [_account: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bannerURL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseTokenURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnToken"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "callFallback"
  ): TypedContractMethod<[_to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "collectionBannerMedia"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectionCategory"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectionDescription"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectionDisplayPicture"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectionName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectionSymbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contractOptionIsBurnable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractOptionIsMintable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractOptionIsPausable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractOptionIsSnapshotable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "disableRoyaltiesUntil"
  ): TypedContractMethod<[_timestamp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAccountTokenBalance"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBaseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getContractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMarketplaceAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNFTItem"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [[Structs.NFTItemStructOutput, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNFTItems"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyFeeDenominator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyFraction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenAuditTrail"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [Structs.TokenActivityItemStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTokenCreator"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenCurrentId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenCurrentSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenMaximumSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenMintee"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenMinter"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenMintingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenOwner"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenRoyaltyInfo"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _tokenPrice: BigNumberish],
    [Structs.RoyaltyItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokensCreatedByAddress"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensCreatedByMe"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTokensMintedByAddress"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensMintedByMe"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTokensOwnedByAddress"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensOwnedByMe"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "grantAdminRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantMinterRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "loggerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marketplaceAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintNewToken"
  ): TypedContractMethod<
    [_to: AddressLike, _tokenURI: string, _royaltyFraction: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "photoURL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverTokens"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _account: AddressLike,
      _standard: BigNumberish,
      _amount: BigNumberish,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceAdminRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceContractOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceMinterRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAdminRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeMinterRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltiesDisabledUntil"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyFraction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "royaltyReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "searchAddress"
  ): TypedContractMethod<
    [_itemKey: BytesLike, _address: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchTimestamp"
  ): TypedContractMethod<
    [_itemKey: BytesLike, _uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchTokenId"
  ): TypedContractMethod<
    [_uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchTokenURI"
  ): TypedContractMethod<
    [_string: string],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollectionBannerMedia"
  ): TypedContractMethod<[_bannerURL: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollectionDescription"
  ): TypedContractMethod<[_description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollectionDisplayPicture"
  ): TypedContractMethod<[_photoURL: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractURI"
  ): TypedContractMethod<[_newContractURI: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLoggerAddress"
  ): TypedContractMethod<[_logger: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketplaceAddress"
  ): TypedContractMethod<
    [_newMarketplaceAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMintingFee"
  ): TypedContractMethod<[_newMintingFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNewOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoyalties"
  ): TypedContractMethod<
    [
      _royaltyReceiver: AddressLike,
      _royaltyFraction: BigNumberish,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenCategory"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenIdToNFTItem"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        minterAddress: string;
        ownerAddress: string;
        tokenId: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenMaximumSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURIExists"
  ): TypedContractMethod<[_tokenURI: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToFallback"
  ): TypedContractMethod<[_to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "transferToken"
  ): TypedContractMethod<
    [_to: AddressLike, _tokenId: BigNumberish, _from: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateContractTreasury"
  ): TypedContractMethod<
    [_newContractTreasury: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [void],
    "payable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ApprovedAddressForTokenChanged"
  ): TypedContractEvent<
    ApprovedAddressForTokenChangedEvent.InputTuple,
    ApprovedAddressForTokenChangedEvent.OutputTuple,
    ApprovedAddressForTokenChangedEvent.OutputObject
  >;
  getEvent(
    key: "BaseURIChanged"
  ): TypedContractEvent<
    BaseURIChangedEvent.InputTuple,
    BaseURIChangedEvent.OutputTuple,
    BaseURIChangedEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "CollectionBannerMediaChanged"
  ): TypedContractEvent<
    CollectionBannerMediaChangedEvent.InputTuple,
    CollectionBannerMediaChangedEvent.OutputTuple,
    CollectionBannerMediaChangedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionDescriptionChanged"
  ): TypedContractEvent<
    CollectionDescriptionChangedEvent.InputTuple,
    CollectionDescriptionChangedEvent.OutputTuple,
    CollectionDescriptionChangedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionDisplayPictureChanged"
  ): TypedContractEvent<
    CollectionDisplayPictureChangedEvent.InputTuple,
    CollectionDisplayPictureChangedEvent.OutputTuple,
    CollectionDisplayPictureChangedEvent.OutputObject
  >;
  getEvent(
    key: "ContractURIChanged"
  ): TypedContractEvent<
    ContractURIChangedEvent.InputTuple,
    ContractURIChangedEvent.OutputTuple,
    ContractURIChangedEvent.OutputObject
  >;
  getEvent(
    key: "Log"
  ): TypedContractEvent<
    LogEvent.InputTuple,
    LogEvent.OutputTuple,
    LogEvent.OutputObject
  >;
  getEvent(
    key: "MarketplaceAddressChanged"
  ): TypedContractEvent<
    MarketplaceAddressChangedEvent.InputTuple,
    MarketplaceAddressChangedEvent.OutputTuple,
    MarketplaceAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "MintingFeeChanged"
  ): TypedContractEvent<
    MintingFeeChangedEvent.InputTuple,
    MintingFeeChangedEvent.OutputTuple,
    MintingFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Received"
  ): TypedContractEvent<
    ReceivedEvent.InputTuple,
    ReceivedEvent.OutputTuple,
    ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltiesChanged"
  ): TypedContractEvent<
    RoyaltiesChangedEvent.InputTuple,
    RoyaltiesChangedEvent.OutputTuple,
    RoyaltiesChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltiesDisabled"
  ): TypedContractEvent<
    RoyaltiesDisabledEvent.InputTuple,
    RoyaltiesDisabledEvent.OutputTuple,
    RoyaltiesDisabledEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltiesEnabled"
  ): TypedContractEvent<
    RoyaltiesEnabledEvent.InputTuple,
    RoyaltiesEnabledEvent.OutputTuple,
    RoyaltiesEnabledEvent.OutputObject
  >;
  getEvent(
    key: "TokenBurned"
  ): TypedContractEvent<
    TokenBurnedEvent.InputTuple,
    TokenBurnedEvent.OutputTuple,
    TokenBurnedEvent.OutputObject
  >;
  getEvent(
    key: "TokenMinted"
  ): TypedContractEvent<
    TokenMintedEvent.InputTuple,
    TokenMintedEvent.OutputTuple,
    TokenMintedEvent.OutputObject
  >;
  getEvent(
    key: "TokenTransfered"
  ): TypedContractEvent<
    TokenTransferedEvent.InputTuple,
    TokenTransferedEvent.OutputTuple,
    TokenTransferedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ApprovedAddressForTokenChanged(address,uint256)": TypedContractEvent<
      ApprovedAddressForTokenChangedEvent.InputTuple,
      ApprovedAddressForTokenChangedEvent.OutputTuple,
      ApprovedAddressForTokenChangedEvent.OutputObject
    >;
    ApprovedAddressForTokenChanged: TypedContractEvent<
      ApprovedAddressForTokenChangedEvent.InputTuple,
      ApprovedAddressForTokenChangedEvent.OutputTuple,
      ApprovedAddressForTokenChangedEvent.OutputObject
    >;

    "BaseURIChanged(string)": TypedContractEvent<
      BaseURIChangedEvent.InputTuple,
      BaseURIChangedEvent.OutputTuple,
      BaseURIChangedEvent.OutputObject
    >;
    BaseURIChanged: TypedContractEvent<
      BaseURIChangedEvent.InputTuple,
      BaseURIChangedEvent.OutputTuple,
      BaseURIChangedEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "CollectionBannerMediaChanged(string)": TypedContractEvent<
      CollectionBannerMediaChangedEvent.InputTuple,
      CollectionBannerMediaChangedEvent.OutputTuple,
      CollectionBannerMediaChangedEvent.OutputObject
    >;
    CollectionBannerMediaChanged: TypedContractEvent<
      CollectionBannerMediaChangedEvent.InputTuple,
      CollectionBannerMediaChangedEvent.OutputTuple,
      CollectionBannerMediaChangedEvent.OutputObject
    >;

    "CollectionDescriptionChanged(string)": TypedContractEvent<
      CollectionDescriptionChangedEvent.InputTuple,
      CollectionDescriptionChangedEvent.OutputTuple,
      CollectionDescriptionChangedEvent.OutputObject
    >;
    CollectionDescriptionChanged: TypedContractEvent<
      CollectionDescriptionChangedEvent.InputTuple,
      CollectionDescriptionChangedEvent.OutputTuple,
      CollectionDescriptionChangedEvent.OutputObject
    >;

    "CollectionDisplayPictureChanged(string)": TypedContractEvent<
      CollectionDisplayPictureChangedEvent.InputTuple,
      CollectionDisplayPictureChangedEvent.OutputTuple,
      CollectionDisplayPictureChangedEvent.OutputObject
    >;
    CollectionDisplayPictureChanged: TypedContractEvent<
      CollectionDisplayPictureChangedEvent.InputTuple,
      CollectionDisplayPictureChangedEvent.OutputTuple,
      CollectionDisplayPictureChangedEvent.OutputObject
    >;

    "ContractURIChanged(bytes32)": TypedContractEvent<
      ContractURIChangedEvent.InputTuple,
      ContractURIChangedEvent.OutputTuple,
      ContractURIChangedEvent.OutputObject
    >;
    ContractURIChanged: TypedContractEvent<
      ContractURIChangedEvent.InputTuple,
      ContractURIChangedEvent.OutputTuple,
      ContractURIChangedEvent.OutputObject
    >;

    "Log(string,uint256)": TypedContractEvent<
      LogEvent.InputTuple,
      LogEvent.OutputTuple,
      LogEvent.OutputObject
    >;
    Log: TypedContractEvent<
      LogEvent.InputTuple,
      LogEvent.OutputTuple,
      LogEvent.OutputObject
    >;

    "MarketplaceAddressChanged(address)": TypedContractEvent<
      MarketplaceAddressChangedEvent.InputTuple,
      MarketplaceAddressChangedEvent.OutputTuple,
      MarketplaceAddressChangedEvent.OutputObject
    >;
    MarketplaceAddressChanged: TypedContractEvent<
      MarketplaceAddressChangedEvent.InputTuple,
      MarketplaceAddressChangedEvent.OutputTuple,
      MarketplaceAddressChangedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "MintingFeeChanged(uint256)": TypedContractEvent<
      MintingFeeChangedEvent.InputTuple,
      MintingFeeChangedEvent.OutputTuple,
      MintingFeeChangedEvent.OutputObject
    >;
    MintingFeeChanged: TypedContractEvent<
      MintingFeeChangedEvent.InputTuple,
      MintingFeeChangedEvent.OutputTuple,
      MintingFeeChangedEvent.OutputObject
    >;

    "OwnerChanged(address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Received(address,uint256)": TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
    Received: TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RoyaltiesChanged(address,uint96,uint256)": TypedContractEvent<
      RoyaltiesChangedEvent.InputTuple,
      RoyaltiesChangedEvent.OutputTuple,
      RoyaltiesChangedEvent.OutputObject
    >;
    RoyaltiesChanged: TypedContractEvent<
      RoyaltiesChangedEvent.InputTuple,
      RoyaltiesChangedEvent.OutputTuple,
      RoyaltiesChangedEvent.OutputObject
    >;

    "RoyaltiesDisabled(uint256)": TypedContractEvent<
      RoyaltiesDisabledEvent.InputTuple,
      RoyaltiesDisabledEvent.OutputTuple,
      RoyaltiesDisabledEvent.OutputObject
    >;
    RoyaltiesDisabled: TypedContractEvent<
      RoyaltiesDisabledEvent.InputTuple,
      RoyaltiesDisabledEvent.OutputTuple,
      RoyaltiesDisabledEvent.OutputObject
    >;

    "RoyaltiesEnabled()": TypedContractEvent<
      RoyaltiesEnabledEvent.InputTuple,
      RoyaltiesEnabledEvent.OutputTuple,
      RoyaltiesEnabledEvent.OutputObject
    >;
    RoyaltiesEnabled: TypedContractEvent<
      RoyaltiesEnabledEvent.InputTuple,
      RoyaltiesEnabledEvent.OutputTuple,
      RoyaltiesEnabledEvent.OutputObject
    >;

    "TokenBurned(address,address,uint256,uint256)": TypedContractEvent<
      TokenBurnedEvent.InputTuple,
      TokenBurnedEvent.OutputTuple,
      TokenBurnedEvent.OutputObject
    >;
    TokenBurned: TypedContractEvent<
      TokenBurnedEvent.InputTuple,
      TokenBurnedEvent.OutputTuple,
      TokenBurnedEvent.OutputObject
    >;

    "TokenMinted(address,address,uint256,uint256)": TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;
    TokenMinted: TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;

    "TokenTransfered(address,address,uint256,uint256)": TypedContractEvent<
      TokenTransferedEvent.InputTuple,
      TokenTransferedEvent.OutputTuple,
      TokenTransferedEvent.OutputObject
    >;
    TokenTransfered: TypedContractEvent<
      TokenTransferedEvent.InputTuple,
      TokenTransferedEvent.OutputTuple,
      TokenTransferedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
