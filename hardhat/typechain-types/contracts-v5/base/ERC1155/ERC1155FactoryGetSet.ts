/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace Structs {
  export type NFTItemStruct = {
    minterAddress: AddressLike;
    creatorAddress: [AddressLike, AddressLike];
    ownerAddress: AddressLike;
    tokenId: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type NFTItemStructOutput = [
    minterAddress: string,
    creatorAddress: [string, string],
    ownerAddress: string,
    tokenId: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    minterAddress: string;
    creatorAddress: [string, string];
    ownerAddress: string;
    tokenId: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type SuppliesStruct = {
    minted: BigNumberish;
    current: BigNumberish;
    maximum: BigNumberish;
  };

  export type SuppliesStructOutput = [
    minted: bigint,
    current: bigint,
    maximum: bigint
  ] & { minted: bigint; current: bigint; maximum: bigint };

  export type NFTStruct = { nftItem: Structs.NFTItemStruct; tokenURI: string };

  export type NFTStructOutput = [
    nftItem: Structs.NFTItemStructOutput,
    tokenURI: string
  ] & { nftItem: Structs.NFTItemStructOutput; tokenURI: string };

  export type TokenActivityItemStruct = {
    activityType: BigNumberish;
    fromAddress: AddressLike;
    toAddress: AddressLike;
    timestamp: BigNumberish;
  };

  export type TokenActivityItemStructOutput = [
    activityType: bigint,
    fromAddress: string,
    toAddress: string,
    timestamp: bigint
  ] & {
    activityType: bigint;
    fromAddress: string;
    toAddress: string;
    timestamp: bigint;
  };
}

export interface ERC1155FactoryGetSetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "_tokenCurrentSupply"
      | "_tokenIdCounter"
      | "balanceOf"
      | "balanceOfBatch"
      | "baseURI"
      | "burn"
      | "burnBatch"
      | "callFallback"
      | "contractOptionIsBurnable"
      | "contractOptionIsMintable"
      | "contractOptionIsPausable"
      | "contractOptionIsSnapshotable"
      | "contractTreasury"
      | "currentSupplyById"
      | "deleteDefaultRoyalty"
      | "getBaseURI"
      | "getMarketplaceAddress"
      | "getNFTItem"
      | "getNFTItems"
      | "getOwner"
      | "getRoleAdmin"
      | "getTokenAuditTrail"
      | "getTokenCreator"
      | "getTokenCurrentSupply"
      | "getTokenMaximumSupply"
      | "getTokenMintee"
      | "getTokenMinter"
      | "getTokenMintingFee"
      | "getTokenOwner"
      | "getTokenSupplies"
      | "getTokenURI"
      | "getTokensCreatedByAddress"
      | "getTokensCreatedByMe"
      | "getTokensMintedByAddress"
      | "getTokensMintedByMe"
      | "getTokensOwnedByAddress"
      | "getTokensOwnedByMe"
      | "grantAdminRole"
      | "grantMinterRole"
      | "grantRole"
      | "hasRole"
      | "isApprovedForAll"
      | "loggerAddress"
      | "marketplaceAddress"
      | "maxSupplyById"
      | "mintBatch"
      | "mintSingle"
      | "mintedSupplyById"
      | "mintingFee"
      | "owner"
      | "pause"
      | "paused"
      | "recoverTokens"
      | "renounceAdminRole"
      | "renounceContractOwnership"
      | "renounceMinterRole"
      | "renounceRole"
      | "resetTokenRoyalty"
      | "revokeAdminRole"
      | "revokeMinterRole"
      | "revokeRole"
      | "royaltyInfo"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "searchAddress"
      | "searchTimestamp"
      | "searchTokenId"
      | "searchTokenURI"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setDefaultRoyalty"
      | "setLoggerAddress"
      | "setMarketplaceAddress"
      | "setMintingFee"
      | "setNewOwner"
      | "setTokenRoyalty"
      | "setTokenURI"
      | "supportsInterface"
      | "tokenIdToNFTItem"
      | "tokenMaximumSupply"
      | "tokenURI"
      | "tokenURIExists"
      | "transferToFallback"
      | "transferToken"
      | "unpause"
      | "updateContractTreasury"
      | "uri"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "BaseURIChanged"
      | "MarketplaceAddressChanged"
      | "MintingFeeChanged"
      | "OwnerChanged"
      | "Paused"
      | "Received"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokenBurned"
      | "TokenMinted"
      | "TokenTransfered"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenCurrentSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callFallback",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractOptionIsBurnable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractOptionIsMintable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractOptionIsPausable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractOptionIsSnapshotable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSupplyById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteDefaultRoyalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketplaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTItems",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAuditTrail",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCreator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCurrentSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMaximumSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMintee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMinter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSupplies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensCreatedByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensCreatedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensMintedByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensMintedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOwnedByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOwnedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantMinterRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loggerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupplyById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      string[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSingle",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedSupplyById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverTokens",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceContractOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinterRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetTokenRoyalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMinterRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "searchAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "searchTimestamp",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "searchTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "searchTokenURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDefaultRoyalty",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoggerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplaceAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRoyalty",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToNFTItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMaximumSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURIExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToFallback",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateContractTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_tokenCurrentSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_tokenIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOptionIsBurnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOptionIsMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOptionIsPausable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOptionIsSnapshotable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSupplyById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteDefaultRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFTItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNFTItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAuditTrail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCurrentSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMaximumSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMintee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensCreatedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensCreatedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensMintedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensMintedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOwnedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOwnedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loggerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupplyById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintSingle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintedSupplyById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceContractOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetTokenRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoggerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToNFTItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMaximumSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenURIExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateContractTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseURIChangedEvent {
  export type InputTuple = [newURI: string];
  export type OutputTuple = [newURI: string];
  export interface OutputObject {
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketplaceAddressChangedEvent {
  export type InputTuple = [newMarketplaceAddress: AddressLike];
  export type OutputTuple = [newMarketplaceAddress: string];
  export interface OutputObject {
    newMarketplaceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintingFeeChangedEvent {
  export type InputTuple = [newMintingFee: BigNumberish];
  export type OutputTuple = [newMintingFee: bigint];
  export interface OutputObject {
    newMintingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedEvent {
  export type InputTuple = [arg0: AddressLike, arg1: BigNumberish];
  export type OutputTuple = [arg0: string, arg1: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenBurnedEvent {
  export type InputTuple = [
    creator: AddressLike,
    burner: AddressLike,
    burnedTokenId: BigNumberish,
    batchSize: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    burner: string,
    burnedTokenId: bigint,
    batchSize: bigint
  ];
  export interface OutputObject {
    creator: string;
    burner: string;
    burnedTokenId: bigint;
    batchSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenMintedEvent {
  export type InputTuple = [
    creator: AddressLike,
    minter: AddressLike,
    newTokenId: BigNumberish,
    batchSize: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    minter: string,
    newTokenId: bigint,
    batchSize: bigint
  ];
  export interface OutputObject {
    creator: string;
    minter: string;
    newTokenId: bigint;
    batchSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTransferedEvent {
  export type InputTuple = [
    creator: AddressLike,
    burner: AddressLike,
    transferedTokenId: BigNumberish,
    batchSize: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    burner: string,
    transferedTokenId: bigint,
    batchSize: bigint
  ];
  export interface OutputObject {
    creator: string;
    burner: string;
    transferedTokenId: bigint;
    batchSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC1155FactoryGetSet extends BaseContract {
  connect(runner?: ContractRunner | null): ERC1155FactoryGetSet;
  waitForDeployment(): Promise<this>;

  interface: ERC1155FactoryGetSetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  _tokenCurrentSupply: TypedContractMethod<[], [bigint], "view">;

  _tokenIdCounter: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  baseURI: TypedContractMethod<[], [string], "view">;

  burn: TypedContractMethod<
    [_from: AddressLike, _tokenId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  burnBatch: TypedContractMethod<
    [_account: AddressLike, _ids: BigNumberish[], _values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  callFallback: TypedContractMethod<[_to: AddressLike], [void], "payable">;

  contractOptionIsBurnable: TypedContractMethod<[], [boolean], "view">;

  contractOptionIsMintable: TypedContractMethod<[], [boolean], "view">;

  contractOptionIsPausable: TypedContractMethod<[], [boolean], "view">;

  contractOptionIsSnapshotable: TypedContractMethod<[], [boolean], "view">;

  contractTreasury: TypedContractMethod<[], [string], "view">;

  currentSupplyById: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  deleteDefaultRoyalty: TypedContractMethod<[], [void], "nonpayable">;

  getBaseURI: TypedContractMethod<[], [string], "view">;

  getMarketplaceAddress: TypedContractMethod<[], [string], "view">;

  getNFTItem: TypedContractMethod<
    [_tokenId: BigNumberish],
    [[Structs.NFTItemStructOutput, string, Structs.SuppliesStructOutput]],
    "view"
  >;

  getNFTItems: TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenAuditTrail: TypedContractMethod<
    [_tokenId: BigNumberish],
    [Structs.TokenActivityItemStructOutput[]],
    "nonpayable"
  >;

  getTokenCreator: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenCurrentSupply: TypedContractMethod<[], [bigint], "view">;

  getTokenMaximumSupply: TypedContractMethod<[], [bigint], "view">;

  getTokenMintee: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenMinter: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenMintingFee: TypedContractMethod<[], [bigint], "view">;

  getTokenOwner: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenSupplies: TypedContractMethod<
    [_tokenId: BigNumberish],
    [Structs.SuppliesStructOutput],
    "view"
  >;

  getTokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  getTokensCreatedByAddress: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensCreatedByMe: TypedContractMethod<
    [],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensMintedByAddress: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensMintedByMe: TypedContractMethod<
    [],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensOwnedByAddress: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensOwnedByMe: TypedContractMethod<
    [],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  grantAdminRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantMinterRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  loggerAddress: TypedContractMethod<[], [string], "view">;

  marketplaceAddress: TypedContractMethod<[], [string], "view">;

  maxSupplyById: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  mintBatch: TypedContractMethod<
    [
      _to: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _maxSupplies: BigNumberish[],
      _tokenURIs: string[],
      _data: BytesLike
    ],
    [void],
    "payable"
  >;

  mintSingle: TypedContractMethod<
    [
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _maxSupply: BigNumberish,
      _tokenURI: string,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;

  mintedSupplyById: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  mintingFee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  recoverTokens: TypedContractMethod<
    [
      _token: AddressLike,
      _account: AddressLike,
      _standard: BigNumberish,
      _amount: BigNumberish,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceAdminRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceContractOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceMinterRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  resetTokenRoyalty: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeAdminRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeMinterRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  searchAddress: TypedContractMethod<
    [_itemKey: BytesLike, _address: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  searchTimestamp: TypedContractMethod<
    [_itemKey: BytesLike, _uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  searchTokenId: TypedContractMethod<
    [_uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  searchTokenURI: TypedContractMethod<
    [_string: string],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[_newURI: string], [void], "nonpayable">;

  setDefaultRoyalty: TypedContractMethod<
    [_receiver: AddressLike, _feeNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLoggerAddress: TypedContractMethod<
    [_logger: AddressLike],
    [void],
    "nonpayable"
  >;

  setMarketplaceAddress: TypedContractMethod<
    [_newMarketplaceAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setMintingFee: TypedContractMethod<
    [_newMintingFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNewOwner: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenRoyalty: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _receiver: AddressLike,
      _feeNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTokenURI: TypedContractMethod<
    [_tokenId: BigNumberish, _tokenURI: string],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenIdToNFTItem: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        minterAddress: string;
        ownerAddress: string;
        tokenId: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  tokenMaximumSupply: TypedContractMethod<[], [bigint], "view">;

  tokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  tokenURIExists: TypedContractMethod<[_tokenURI: string], [boolean], "view">;

  transferToFallback: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "payable"
  >;

  transferToken: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateContractTreasury: TypedContractMethod<
    [_newContractTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  uri: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  withdraw: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_tokenCurrentSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_tokenIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [_from: AddressLike, _tokenId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnBatch"
  ): TypedContractMethod<
    [_account: AddressLike, _ids: BigNumberish[], _values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callFallback"
  ): TypedContractMethod<[_to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "contractOptionIsBurnable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractOptionIsMintable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractOptionIsPausable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractOptionIsSnapshotable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentSupplyById"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "deleteDefaultRoyalty"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBaseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMarketplaceAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNFTItem"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [[Structs.NFTItemStructOutput, string, Structs.SuppliesStructOutput]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNFTItems"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenAuditTrail"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [Structs.TokenActivityItemStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTokenCreator"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenCurrentSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenMaximumSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenMintee"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenMinter"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenMintingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenOwner"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenSupplies"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [Structs.SuppliesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokensCreatedByAddress"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensCreatedByMe"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTokensMintedByAddress"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensMintedByMe"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTokensOwnedByAddress"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensOwnedByMe"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "grantAdminRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantMinterRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "loggerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marketplaceAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxSupplyById"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintBatch"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _maxSupplies: BigNumberish[],
      _tokenURIs: string[],
      _data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintSingle"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _maxSupply: BigNumberish,
      _tokenURI: string,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintedSupplyById"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoverTokens"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _account: AddressLike,
      _standard: BigNumberish,
      _amount: BigNumberish,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceAdminRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceContractOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceMinterRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resetTokenRoyalty"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAdminRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeMinterRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "searchAddress"
  ): TypedContractMethod<
    [_itemKey: BytesLike, _address: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchTimestamp"
  ): TypedContractMethod<
    [_itemKey: BytesLike, _uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchTokenId"
  ): TypedContractMethod<
    [_uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchTokenURI"
  ): TypedContractMethod<
    [_string: string],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[_newURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultRoyalty"
  ): TypedContractMethod<
    [_receiver: AddressLike, _feeNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLoggerAddress"
  ): TypedContractMethod<[_logger: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketplaceAddress"
  ): TypedContractMethod<
    [_newMarketplaceAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMintingFee"
  ): TypedContractMethod<[_newMintingFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNewOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenRoyalty"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _receiver: AddressLike,
      _feeNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenURI"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _tokenURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenIdToNFTItem"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        minterAddress: string;
        ownerAddress: string;
        tokenId: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenMaximumSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURIExists"
  ): TypedContractMethod<[_tokenURI: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferToFallback"
  ): TypedContractMethod<[_to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "transferToken"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateContractTreasury"
  ): TypedContractMethod<
    [_newContractTreasury: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [void],
    "payable"
  >;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BaseURIChanged"
  ): TypedContractEvent<
    BaseURIChangedEvent.InputTuple,
    BaseURIChangedEvent.OutputTuple,
    BaseURIChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketplaceAddressChanged"
  ): TypedContractEvent<
    MarketplaceAddressChangedEvent.InputTuple,
    MarketplaceAddressChangedEvent.OutputTuple,
    MarketplaceAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "MintingFeeChanged"
  ): TypedContractEvent<
    MintingFeeChangedEvent.InputTuple,
    MintingFeeChangedEvent.OutputTuple,
    MintingFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Received"
  ): TypedContractEvent<
    ReceivedEvent.InputTuple,
    ReceivedEvent.OutputTuple,
    ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokenBurned"
  ): TypedContractEvent<
    TokenBurnedEvent.InputTuple,
    TokenBurnedEvent.OutputTuple,
    TokenBurnedEvent.OutputObject
  >;
  getEvent(
    key: "TokenMinted"
  ): TypedContractEvent<
    TokenMintedEvent.InputTuple,
    TokenMintedEvent.OutputTuple,
    TokenMintedEvent.OutputObject
  >;
  getEvent(
    key: "TokenTransfered"
  ): TypedContractEvent<
    TokenTransferedEvent.InputTuple,
    TokenTransferedEvent.OutputTuple,
    TokenTransferedEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BaseURIChanged(string)": TypedContractEvent<
      BaseURIChangedEvent.InputTuple,
      BaseURIChangedEvent.OutputTuple,
      BaseURIChangedEvent.OutputObject
    >;
    BaseURIChanged: TypedContractEvent<
      BaseURIChangedEvent.InputTuple,
      BaseURIChangedEvent.OutputTuple,
      BaseURIChangedEvent.OutputObject
    >;

    "MarketplaceAddressChanged(address)": TypedContractEvent<
      MarketplaceAddressChangedEvent.InputTuple,
      MarketplaceAddressChangedEvent.OutputTuple,
      MarketplaceAddressChangedEvent.OutputObject
    >;
    MarketplaceAddressChanged: TypedContractEvent<
      MarketplaceAddressChangedEvent.InputTuple,
      MarketplaceAddressChangedEvent.OutputTuple,
      MarketplaceAddressChangedEvent.OutputObject
    >;

    "MintingFeeChanged(uint256)": TypedContractEvent<
      MintingFeeChangedEvent.InputTuple,
      MintingFeeChangedEvent.OutputTuple,
      MintingFeeChangedEvent.OutputObject
    >;
    MintingFeeChanged: TypedContractEvent<
      MintingFeeChangedEvent.InputTuple,
      MintingFeeChangedEvent.OutputTuple,
      MintingFeeChangedEvent.OutputObject
    >;

    "OwnerChanged(address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Received(address,uint256)": TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
    Received: TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokenBurned(address,address,uint256,uint256)": TypedContractEvent<
      TokenBurnedEvent.InputTuple,
      TokenBurnedEvent.OutputTuple,
      TokenBurnedEvent.OutputObject
    >;
    TokenBurned: TypedContractEvent<
      TokenBurnedEvent.InputTuple,
      TokenBurnedEvent.OutputTuple,
      TokenBurnedEvent.OutputObject
    >;

    "TokenMinted(address,address,uint256,uint256)": TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;
    TokenMinted: TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;

    "TokenTransfered(address,address,uint256,uint256)": TypedContractEvent<
      TokenTransferedEvent.InputTuple,
      TokenTransferedEvent.OutputTuple,
      TokenTransferedEvent.OutputObject
    >;
    TokenTransfered: TypedContractEvent<
      TokenTransferedEvent.InputTuple,
      TokenTransferedEvent.OutputTuple,
      TokenTransferedEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
