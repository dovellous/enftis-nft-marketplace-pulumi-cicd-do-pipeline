/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace Structs {
  export type NFTMarketItemActivityStruct = {
    activityType: BigNumberish;
    fromAddress: AddressLike;
    toAddress: AddressLike;
    timestamp: BigNumberish;
  };

  export type NFTMarketItemActivityStructOutput = [
    activityType: bigint,
    fromAddress: string,
    toAddress: string,
    timestamp: bigint
  ] & {
    activityType: bigint;
    fromAddress: string;
    toAddress: string;
    timestamp: bigint;
  };

  export type TokenActivityItemStruct = {
    activityType: BigNumberish;
    fromAddress: AddressLike;
    toAddress: AddressLike;
    timestamp: BigNumberish;
  };

  export type TokenActivityItemStructOutput = [
    activityType: bigint,
    fromAddress: string,
    toAddress: string,
    timestamp: bigint
  ] & {
    activityType: bigint;
    fromAddress: string;
    toAddress: string;
    timestamp: bigint;
  };
}

export interface ERCLoggingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getERCMarketplaceLogging"
      | "getERCTokenLogging"
      | "logMarketplaceActivity"
      | "logTokenActivity"
      | "setERCMarketplaceLogging"
      | "setERCTokenLogging"
      | "tokenIdToNFTMarketItemActivity"
      | "tokenIdToTokenActivityItem"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getERCMarketplaceLogging",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getERCTokenLogging",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logMarketplaceActivity",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "logTokenActivity",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setERCMarketplaceLogging",
    values: [AddressLike, BigNumberish, Structs.NFTMarketItemActivityStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setERCTokenLogging",
    values: [AddressLike, BigNumberish, Structs.TokenActivityItemStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToNFTMarketItemActivity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToTokenActivityItem",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getERCMarketplaceLogging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERCTokenLogging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMarketplaceActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logTokenActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERCMarketplaceLogging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERCTokenLogging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToNFTMarketItemActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToTokenActivityItem",
    data: BytesLike
  ): Result;
}

export interface ERCLogging extends BaseContract {
  connect(runner?: ContractRunner | null): ERCLogging;
  waitForDeployment(): Promise<this>;

  interface: ERCLoggingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getERCMarketplaceLogging: TypedContractMethod<
    [_contract: AddressLike, _tokenId: BigNumberish],
    [Structs.NFTMarketItemActivityStructOutput[]],
    "view"
  >;

  getERCTokenLogging: TypedContractMethod<
    [_contract: AddressLike, _tokenId: BigNumberish],
    [Structs.TokenActivityItemStructOutput[]],
    "view"
  >;

  logMarketplaceActivity: TypedContractMethod<
    [
      _contract: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _type: BigNumberish,
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  logTokenActivity: TypedContractMethod<
    [
      _contract: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _type: BigNumberish,
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setERCMarketplaceLogging: TypedContractMethod<
    [
      _contract: AddressLike,
      _tokenId: BigNumberish,
      _activity: Structs.NFTMarketItemActivityStruct
    ],
    [void],
    "nonpayable"
  >;

  setERCTokenLogging: TypedContractMethod<
    [
      _contract: AddressLike,
      _tokenId: BigNumberish,
      _activity: Structs.TokenActivityItemStruct
    ],
    [void],
    "nonpayable"
  >;

  tokenIdToNFTMarketItemActivity: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        activityType: bigint;
        fromAddress: string;
        toAddress: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  tokenIdToTokenActivityItem: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        activityType: bigint;
        fromAddress: string;
        toAddress: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getERCMarketplaceLogging"
  ): TypedContractMethod<
    [_contract: AddressLike, _tokenId: BigNumberish],
    [Structs.NFTMarketItemActivityStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getERCTokenLogging"
  ): TypedContractMethod<
    [_contract: AddressLike, _tokenId: BigNumberish],
    [Structs.TokenActivityItemStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "logMarketplaceActivity"
  ): TypedContractMethod<
    [
      _contract: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _type: BigNumberish,
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "logTokenActivity"
  ): TypedContractMethod<
    [
      _contract: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _type: BigNumberish,
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setERCMarketplaceLogging"
  ): TypedContractMethod<
    [
      _contract: AddressLike,
      _tokenId: BigNumberish,
      _activity: Structs.NFTMarketItemActivityStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setERCTokenLogging"
  ): TypedContractMethod<
    [
      _contract: AddressLike,
      _tokenId: BigNumberish,
      _activity: Structs.TokenActivityItemStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenIdToNFTMarketItemActivity"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        activityType: bigint;
        fromAddress: string;
        toAddress: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenIdToTokenActivityItem"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        activityType: bigint;
        fromAddress: string;
        toAddress: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
