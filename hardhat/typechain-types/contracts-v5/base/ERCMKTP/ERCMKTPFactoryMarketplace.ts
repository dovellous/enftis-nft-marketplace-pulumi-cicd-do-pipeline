/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace Structs {
  export type NFTItemStruct = {
    minterAddress: AddressLike;
    creatorAddress: [AddressLike, AddressLike];
    ownerAddress: AddressLike;
    tokenId: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type NFTItemStructOutput = [
    minterAddress: string,
    creatorAddress: [string, string],
    ownerAddress: string,
    tokenId: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    minterAddress: string;
    creatorAddress: [string, string];
    ownerAddress: string;
    tokenId: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type NFTStruct = { nftItem: Structs.NFTItemStruct; tokenURI: string };

  export type NFTStructOutput = [
    nftItem: Structs.NFTItemStructOutput,
    tokenURI: string
  ] & { nftItem: Structs.NFTItemStructOutput; tokenURI: string };
}

export interface ERCMKTPFactoryMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "_listedItems"
      | "_soldItems"
      | "_tokenIndexedAuctionIDs"
      | "_tokenIndexedIDs"
      | "callFallback"
      | "contractTreasury"
      | "contractURI"
      | "createMarketSale"
      | "createNFTMarketItem"
      | "delistNFTMarketItem"
      | "getNFT1155Items"
      | "getNFT721Items"
      | "getRoleAdmin"
      | "getTokenOwner1155"
      | "getTokenOwner721"
      | "grantRole"
      | "hasRole"
      | "listNFTMarketItem"
      | "listingFee"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "paused"
      | "recoverTokens"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "tokenIdToNFTMarketItem"
      | "tokenIdToNFTMarketItemActivity"
      | "tokenIndexedID2AuctionDetails"
      | "tokenIndexedID2NFTMarketItem"
      | "transferToFallback"
      | "updateContractTreasury"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractURIChanged"
      | "ListingFeeChanged"
      | "MarketplaceAddressChanged"
      | "NFTMarketItemCreated"
      | "NFTMarketItemDelisted"
      | "NFTMarketItemListed"
      | "NFTMarketItemSold"
      | "OwnerChanged"
      | "Paused"
      | "Received"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_listedItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_soldItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenIndexedAuctionIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenIndexedIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callFallback",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNFTMarketItem",
    values: [AddressLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistNFTMarketItem",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFT1155Items",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFT721Items",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOwner1155",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOwner721",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFTMarketItem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverTokens",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToNFTMarketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToNFTMarketItemActivity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIndexedID2AuctionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIndexedID2NFTMarketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToFallback",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_listedItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_soldItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_tokenIndexedAuctionIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_tokenIndexedIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNFTMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistNFTMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFT1155Items",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFT721Items",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOwner1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOwner721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listNFTMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToNFTMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToNFTMarketItemActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIndexedID2AuctionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIndexedID2NFTMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ContractURIChangedEvent {
  export type InputTuple = [newURI: BytesLike];
  export type OutputTuple = [newURI: string];
  export interface OutputObject {
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingFeeChangedEvent {
  export type InputTuple = [newListingFee: BigNumberish];
  export type OutputTuple = [newListingFee: bigint];
  export interface OutputObject {
    newListingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketplaceAddressChangedEvent {
  export type InputTuple = [newMarketplaceAddress: AddressLike];
  export type OutputTuple = [newMarketplaceAddress: string];
  export interface OutputObject {
    newMarketplaceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTMarketItemCreatedEvent {
  export type InputTuple = [tokenIndexedID: BigNumberish];
  export type OutputTuple = [tokenIndexedID: bigint];
  export interface OutputObject {
    tokenIndexedID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTMarketItemDelistedEvent {
  export type InputTuple = [tokenIndexedID: BigNumberish];
  export type OutputTuple = [tokenIndexedID: bigint];
  export interface OutputObject {
    tokenIndexedID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTMarketItemListedEvent {
  export type InputTuple = [tokenIndexedID: BigNumberish];
  export type OutputTuple = [tokenIndexedID: bigint];
  export interface OutputObject {
    tokenIndexedID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTMarketItemSoldEvent {
  export type InputTuple = [
    tokenIndexedID: BigNumberish,
    amount: BigNumberish,
    buyer: AddressLike
  ];
  export type OutputTuple = [
    tokenIndexedID: bigint,
    amount: bigint,
    buyer: string
  ];
  export interface OutputObject {
    tokenIndexedID: bigint;
    amount: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedEvent {
  export type InputTuple = [arg0: AddressLike, arg1: BigNumberish];
  export type OutputTuple = [arg0: string, arg1: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERCMKTPFactoryMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): ERCMKTPFactoryMarketplace;
  waitForDeployment(): Promise<this>;

  interface: ERCMKTPFactoryMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  _listedItems: TypedContractMethod<[], [bigint], "view">;

  _soldItems: TypedContractMethod<[], [bigint], "view">;

  _tokenIndexedAuctionIDs: TypedContractMethod<[], [bigint], "view">;

  _tokenIndexedIDs: TypedContractMethod<[], [bigint], "view">;

  callFallback: TypedContractMethod<[_to: AddressLike], [void], "payable">;

  contractTreasury: TypedContractMethod<[], [string], "view">;

  contractURI: TypedContractMethod<[], [string], "view">;

  createMarketSale: TypedContractMethod<
    [tokenIndexedID: BigNumberish],
    [void],
    "payable"
  >;

  createNFTMarketItem: TypedContractMethod<
    [
      tokenContractAddress: AddressLike,
      tokenInterfaceId: BytesLike,
      tokenId: BigNumberish,
      price: BigNumberish,
      auctionHours: BigNumberish
    ],
    [[boolean, string, bigint, bigint]],
    "payable"
  >;

  delistNFTMarketItem: TypedContractMethod<
    [tokenIndexedID: BigNumberish, removeFromMarketplace: boolean],
    [void],
    "nonpayable"
  >;

  getNFT1155Items: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getNFT721Items: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenOwner1155: TypedContractMethod<
    [_account: AddressLike, _tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenOwner721: TypedContractMethod<
    [_account: AddressLike, _tokenId: BigNumberish],
    [string],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  listNFTMarketItem: TypedContractMethod<
    [tokenIndexedID: BigNumberish, newPrice: BigNumberish],
    [void],
    "payable"
  >;

  listingFee: TypedContractMethod<[], [bigint], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  recoverTokens: TypedContractMethod<
    [
      _token: AddressLike,
      _account: AddressLike,
      _standard: BigNumberish,
      _amount: BigNumberish,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenIdToNFTMarketItem: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        tokenInterfaceId: string;
        sold: boolean;
        isListed: boolean;
        isAuction: boolean;
        supportsRoyalties: boolean;
        tokenContractAddress: string;
        price: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        tokenId: bigint;
        tokenIndexedID: bigint;
      }
    ],
    "view"
  >;

  tokenIdToNFTMarketItemActivity: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        activityType: bigint;
        fromAddress: string;
        toAddress: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  tokenIndexedID2AuctionDetails: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        highestBid: bigint;
        highestBidder: string;
        timeEnding: bigint;
      }
    ],
    "view"
  >;

  tokenIndexedID2NFTMarketItem: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        tokenInterfaceId: string;
        sold: boolean;
        isListed: boolean;
        isAuction: boolean;
        supportsRoyalties: boolean;
        tokenContractAddress: string;
        price: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        tokenId: bigint;
        tokenIndexedID: bigint;
      }
    ],
    "view"
  >;

  transferToFallback: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "payable"
  >;

  updateContractTreasury: TypedContractMethod<
    [_newContractTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_listedItems"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_soldItems"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_tokenIndexedAuctionIDs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_tokenIndexedIDs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "callFallback"
  ): TypedContractMethod<[_to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "contractTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createMarketSale"
  ): TypedContractMethod<[tokenIndexedID: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createNFTMarketItem"
  ): TypedContractMethod<
    [
      tokenContractAddress: AddressLike,
      tokenInterfaceId: BytesLike,
      tokenId: BigNumberish,
      price: BigNumberish,
      auctionHours: BigNumberish
    ],
    [[boolean, string, bigint, bigint]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "delistNFTMarketItem"
  ): TypedContractMethod<
    [tokenIndexedID: BigNumberish, removeFromMarketplace: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNFT1155Items"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNFT721Items"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenOwner1155"
  ): TypedContractMethod<
    [_account: AddressLike, _tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenOwner721"
  ): TypedContractMethod<
    [_account: AddressLike, _tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "listNFTMarketItem"
  ): TypedContractMethod<
    [tokenIndexedID: BigNumberish, newPrice: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "listingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoverTokens"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _account: AddressLike,
      _standard: BigNumberish,
      _amount: BigNumberish,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenIdToNFTMarketItem"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        tokenInterfaceId: string;
        sold: boolean;
        isListed: boolean;
        isAuction: boolean;
        supportsRoyalties: boolean;
        tokenContractAddress: string;
        price: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        tokenId: bigint;
        tokenIndexedID: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenIdToNFTMarketItemActivity"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        activityType: bigint;
        fromAddress: string;
        toAddress: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenIndexedID2AuctionDetails"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        highestBid: bigint;
        highestBidder: string;
        timeEnding: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenIndexedID2NFTMarketItem"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        tokenInterfaceId: string;
        sold: boolean;
        isListed: boolean;
        isAuction: boolean;
        supportsRoyalties: boolean;
        tokenContractAddress: string;
        price: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        tokenId: bigint;
        tokenIndexedID: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferToFallback"
  ): TypedContractMethod<[_to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "updateContractTreasury"
  ): TypedContractMethod<
    [_newContractTreasury: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [void],
    "payable"
  >;

  getEvent(
    key: "ContractURIChanged"
  ): TypedContractEvent<
    ContractURIChangedEvent.InputTuple,
    ContractURIChangedEvent.OutputTuple,
    ContractURIChangedEvent.OutputObject
  >;
  getEvent(
    key: "ListingFeeChanged"
  ): TypedContractEvent<
    ListingFeeChangedEvent.InputTuple,
    ListingFeeChangedEvent.OutputTuple,
    ListingFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketplaceAddressChanged"
  ): TypedContractEvent<
    MarketplaceAddressChangedEvent.InputTuple,
    MarketplaceAddressChangedEvent.OutputTuple,
    MarketplaceAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "NFTMarketItemCreated"
  ): TypedContractEvent<
    NFTMarketItemCreatedEvent.InputTuple,
    NFTMarketItemCreatedEvent.OutputTuple,
    NFTMarketItemCreatedEvent.OutputObject
  >;
  getEvent(
    key: "NFTMarketItemDelisted"
  ): TypedContractEvent<
    NFTMarketItemDelistedEvent.InputTuple,
    NFTMarketItemDelistedEvent.OutputTuple,
    NFTMarketItemDelistedEvent.OutputObject
  >;
  getEvent(
    key: "NFTMarketItemListed"
  ): TypedContractEvent<
    NFTMarketItemListedEvent.InputTuple,
    NFTMarketItemListedEvent.OutputTuple,
    NFTMarketItemListedEvent.OutputObject
  >;
  getEvent(
    key: "NFTMarketItemSold"
  ): TypedContractEvent<
    NFTMarketItemSoldEvent.InputTuple,
    NFTMarketItemSoldEvent.OutputTuple,
    NFTMarketItemSoldEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Received"
  ): TypedContractEvent<
    ReceivedEvent.InputTuple,
    ReceivedEvent.OutputTuple,
    ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ContractURIChanged(bytes32)": TypedContractEvent<
      ContractURIChangedEvent.InputTuple,
      ContractURIChangedEvent.OutputTuple,
      ContractURIChangedEvent.OutputObject
    >;
    ContractURIChanged: TypedContractEvent<
      ContractURIChangedEvent.InputTuple,
      ContractURIChangedEvent.OutputTuple,
      ContractURIChangedEvent.OutputObject
    >;

    "ListingFeeChanged(uint256)": TypedContractEvent<
      ListingFeeChangedEvent.InputTuple,
      ListingFeeChangedEvent.OutputTuple,
      ListingFeeChangedEvent.OutputObject
    >;
    ListingFeeChanged: TypedContractEvent<
      ListingFeeChangedEvent.InputTuple,
      ListingFeeChangedEvent.OutputTuple,
      ListingFeeChangedEvent.OutputObject
    >;

    "MarketplaceAddressChanged(address)": TypedContractEvent<
      MarketplaceAddressChangedEvent.InputTuple,
      MarketplaceAddressChangedEvent.OutputTuple,
      MarketplaceAddressChangedEvent.OutputObject
    >;
    MarketplaceAddressChanged: TypedContractEvent<
      MarketplaceAddressChangedEvent.InputTuple,
      MarketplaceAddressChangedEvent.OutputTuple,
      MarketplaceAddressChangedEvent.OutputObject
    >;

    "NFTMarketItemCreated(uint256)": TypedContractEvent<
      NFTMarketItemCreatedEvent.InputTuple,
      NFTMarketItemCreatedEvent.OutputTuple,
      NFTMarketItemCreatedEvent.OutputObject
    >;
    NFTMarketItemCreated: TypedContractEvent<
      NFTMarketItemCreatedEvent.InputTuple,
      NFTMarketItemCreatedEvent.OutputTuple,
      NFTMarketItemCreatedEvent.OutputObject
    >;

    "NFTMarketItemDelisted(uint256)": TypedContractEvent<
      NFTMarketItemDelistedEvent.InputTuple,
      NFTMarketItemDelistedEvent.OutputTuple,
      NFTMarketItemDelistedEvent.OutputObject
    >;
    NFTMarketItemDelisted: TypedContractEvent<
      NFTMarketItemDelistedEvent.InputTuple,
      NFTMarketItemDelistedEvent.OutputTuple,
      NFTMarketItemDelistedEvent.OutputObject
    >;

    "NFTMarketItemListed(uint256)": TypedContractEvent<
      NFTMarketItemListedEvent.InputTuple,
      NFTMarketItemListedEvent.OutputTuple,
      NFTMarketItemListedEvent.OutputObject
    >;
    NFTMarketItemListed: TypedContractEvent<
      NFTMarketItemListedEvent.InputTuple,
      NFTMarketItemListedEvent.OutputTuple,
      NFTMarketItemListedEvent.OutputObject
    >;

    "NFTMarketItemSold(uint256,uint256,address)": TypedContractEvent<
      NFTMarketItemSoldEvent.InputTuple,
      NFTMarketItemSoldEvent.OutputTuple,
      NFTMarketItemSoldEvent.OutputObject
    >;
    NFTMarketItemSold: TypedContractEvent<
      NFTMarketItemSoldEvent.InputTuple,
      NFTMarketItemSoldEvent.OutputTuple,
      NFTMarketItemSoldEvent.OutputObject
    >;

    "OwnerChanged(address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Received(address,uint256)": TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
    Received: TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
