/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace Structs {
  export type NFTItemStruct = {
    minterAddress: AddressLike;
    creatorAddress: [AddressLike, AddressLike];
    ownerAddress: AddressLike;
    tokenId: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type NFTItemStructOutput = [
    minterAddress: string,
    creatorAddress: [string, string],
    ownerAddress: string,
    tokenId: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    minterAddress: string;
    creatorAddress: [string, string];
    ownerAddress: string;
    tokenId: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type NFTStruct = { nftItem: Structs.NFTItemStruct; tokenURI: string };

  export type NFTStructOutput = [
    nftItem: Structs.NFTItemStructOutput,
    tokenURI: string
  ] & { nftItem: Structs.NFTItemStructOutput; tokenURI: string };

  export type TokenActivityItemStruct = {
    activityType: BigNumberish;
    fromAddress: AddressLike;
    toAddress: AddressLike;
    timestamp: BigNumberish;
  };

  export type TokenActivityItemStructOutput = [
    activityType: bigint,
    fromAddress: string,
    toAddress: string,
    timestamp: bigint
  ] & {
    activityType: bigint;
    fromAddress: string;
    toAddress: string;
    timestamp: bigint;
  };

  export type RoyaltyItemStruct = {
    royaltyIsDefined: boolean;
    royaltyReceiver: AddressLike;
    royaltyFraction: BigNumberish;
    royaltyAmount: BigNumberish;
    tokenPrice: BigNumberish;
    tokenId: BigNumberish;
  };

  export type RoyaltyItemStructOutput = [
    royaltyIsDefined: boolean,
    royaltyReceiver: string,
    royaltyFraction: bigint,
    royaltyAmount: bigint,
    tokenPrice: bigint,
    tokenId: bigint
  ] & {
    royaltyIsDefined: boolean;
    royaltyReceiver: string;
    royaltyFraction: bigint;
    royaltyAmount: bigint;
    tokenPrice: bigint;
    tokenId: bigint;
  };
}

export interface IERC721FactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "approveAddressForToken"
      | "collectionBannerMedia"
      | "collectionCategory"
      | "collectionDescription"
      | "collectionDisplayPicture"
      | "collectionName"
      | "collectionSymbol"
      | "getAccountTokenBalance"
      | "getBaseURI"
      | "getContractURI"
      | "getMarketplaceAddress"
      | "getNFTItem"
      | "getNFTItems"
      | "getOwner"
      | "getRoyaltyFeeDenominator"
      | "getRoyaltyFraction"
      | "getRoyaltyReceiver"
      | "getTokenAuditTrail"
      | "getTokenCreator"
      | "getTokenCurrentId"
      | "getTokenCurrentSupply"
      | "getTokenMaximumSupply"
      | "getTokenMintee"
      | "getTokenMinter"
      | "getTokenMintingFee"
      | "getTokenOwner"
      | "getTokenRoyaltyInfo"
      | "getTokenURI"
      | "getTokensCreatedByAddress"
      | "getTokensCreatedByMe"
      | "getTokensMintedByAddress"
      | "getTokensMintedByMe"
      | "getTokensOwnedByAddress"
      | "getTokensOwnedByMe"
      | "grantAdminRole"
      | "grantMinterRole"
      | "ownerOf"
      | "renounceAdminRole"
      | "renounceContractOwnership"
      | "renounceMinterRole"
      | "revokeAdminRole"
      | "revokeMinterRole"
      | "searchAddress"
      | "searchTimestamp"
      | "searchTokenId"
      | "searchTokenURI"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setCollectionBannerMedia"
      | "setCollectionDescription"
      | "setCollectionDisplayPicture"
      | "setContractURI"
      | "setMarketplaceAddress"
      | "setMintingFee"
      | "setNewOwner"
      | "transferFrom"
      | "transferToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAddressForToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionBannerMedia",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionCategory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionDescription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionDisplayPicture",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketplaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTItems",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyFeeDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAuditTrail",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCreator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCurrentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCurrentSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMaximumSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMintee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMinter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRoyaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensCreatedByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensCreatedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensMintedByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensMintedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOwnedByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOwnedByMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantMinterRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceContractOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinterRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMinterRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "searchAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "searchTimestamp",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "searchTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "searchTokenURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCollectionBannerMedia",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionDescription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionDisplayPicture",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplaceAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAddressForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionBannerMedia",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionDisplayPicture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFTItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNFTItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyFeeDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAuditTrail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCurrentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCurrentSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMaximumSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMintee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensCreatedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensCreatedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensMintedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensMintedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOwnedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOwnedByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceContractOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionBannerMedia",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionDisplayPicture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
}

export interface IERC721Factory extends BaseContract {
  connect(runner?: ContractRunner | null): IERC721Factory;
  waitForDeployment(): Promise<this>;

  interface: IERC721FactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveAddressForToken: TypedContractMethod<
    [_account: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  collectionBannerMedia: TypedContractMethod<[], [string], "view">;

  collectionCategory: TypedContractMethod<[], [bigint], "view">;

  collectionDescription: TypedContractMethod<[], [string], "view">;

  collectionDisplayPicture: TypedContractMethod<[], [string], "view">;

  collectionName: TypedContractMethod<[], [string], "view">;

  collectionSymbol: TypedContractMethod<[], [string], "view">;

  getAccountTokenBalance: TypedContractMethod<
    [_account: AddressLike],
    [bigint],
    "view"
  >;

  getBaseURI: TypedContractMethod<[], [string], "view">;

  getContractURI: TypedContractMethod<[], [string], "view">;

  getMarketplaceAddress: TypedContractMethod<[], [string], "view">;

  getNFTItem: TypedContractMethod<
    [_tokenId: BigNumberish],
    [[Structs.NFTItemStructOutput, string]],
    "view"
  >;

  getNFTItems: TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getRoyaltyFeeDenominator: TypedContractMethod<[], [bigint], "view">;

  getRoyaltyFraction: TypedContractMethod<[], [bigint], "view">;

  getRoyaltyReceiver: TypedContractMethod<[], [string], "view">;

  getTokenAuditTrail: TypedContractMethod<
    [_tokenId: BigNumberish],
    [Structs.TokenActivityItemStructOutput[]],
    "view"
  >;

  getTokenCreator: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenCurrentId: TypedContractMethod<[], [bigint], "view">;

  getTokenCurrentSupply: TypedContractMethod<[], [bigint], "view">;

  getTokenMaximumSupply: TypedContractMethod<[], [bigint], "view">;

  getTokenMintee: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenMinter: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenMintingFee: TypedContractMethod<[], [bigint], "view">;

  getTokenOwner: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokenRoyaltyInfo: TypedContractMethod<
    [_tokenId: BigNumberish, _tokenPrice: BigNumberish],
    [Structs.RoyaltyItemStructOutput],
    "view"
  >;

  getTokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  getTokensCreatedByAddress: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensCreatedByMe: TypedContractMethod<
    [],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensMintedByAddress: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensMintedByMe: TypedContractMethod<
    [],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensOwnedByAddress: TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  getTokensOwnedByMe: TypedContractMethod<
    [],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  grantAdminRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantMinterRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  ownerOf: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  renounceAdminRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceContractOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceMinterRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAdminRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeMinterRole: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  searchAddress: TypedContractMethod<
    [_itemKey: BytesLike, _address: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  searchTimestamp: TypedContractMethod<
    [_itemKey: BytesLike, _uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  searchTokenId: TypedContractMethod<
    [_uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  searchTokenURI: TypedContractMethod<
    [_string: string],
    [Structs.NFTStructOutput[]],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;

  setCollectionBannerMedia: TypedContractMethod<
    [_bannerURL: string],
    [void],
    "nonpayable"
  >;

  setCollectionDescription: TypedContractMethod<
    [_description: string],
    [void],
    "nonpayable"
  >;

  setCollectionDisplayPicture: TypedContractMethod<
    [_photoURL: string],
    [void],
    "nonpayable"
  >;

  setContractURI: TypedContractMethod<
    [_newContractURI: BytesLike],
    [void],
    "nonpayable"
  >;

  setMarketplaceAddress: TypedContractMethod<
    [_newMarketplaceAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setMintingFee: TypedContractMethod<
    [_newMintingFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNewOwner: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferToken: TypedContractMethod<
    [_to: AddressLike, _tokenId: BigNumberish, _from: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveAddressForToken"
  ): TypedContractMethod<
    [_account: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectionBannerMedia"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectionCategory"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectionDescription"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectionDisplayPicture"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectionName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectionSymbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAccountTokenBalance"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBaseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getContractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMarketplaceAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNFTItem"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [[Structs.NFTItemStructOutput, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNFTItems"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyFeeDenominator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyFraction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenAuditTrail"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [Structs.TokenActivityItemStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenCreator"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenCurrentId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenCurrentSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenMaximumSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenMintee"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenMinter"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenMintingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenOwner"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenRoyaltyInfo"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _tokenPrice: BigNumberish],
    [Structs.RoyaltyItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTokensCreatedByAddress"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensCreatedByMe"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTokensMintedByAddress"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensMintedByMe"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTokensOwnedByAddress"
  ): TypedContractMethod<
    [_account: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensOwnedByMe"
  ): TypedContractMethod<[], [Structs.NFTStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "grantAdminRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantMinterRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceAdminRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceContractOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceMinterRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAdminRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeMinterRole"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "searchAddress"
  ): TypedContractMethod<
    [_itemKey: BytesLike, _address: AddressLike],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchTimestamp"
  ): TypedContractMethod<
    [_itemKey: BytesLike, _uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchTokenId"
  ): TypedContractMethod<
    [_uint256: BigNumberish],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchTokenURI"
  ): TypedContractMethod<
    [_string: string],
    [Structs.NFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollectionBannerMedia"
  ): TypedContractMethod<[_bannerURL: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollectionDescription"
  ): TypedContractMethod<[_description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollectionDisplayPicture"
  ): TypedContractMethod<[_photoURL: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setContractURI"
  ): TypedContractMethod<[_newContractURI: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketplaceAddress"
  ): TypedContractMethod<
    [_newMarketplaceAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMintingFee"
  ): TypedContractMethod<[_newMintingFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNewOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferToken"
  ): TypedContractMethod<
    [_to: AddressLike, _tokenId: BigNumberish, _from: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
