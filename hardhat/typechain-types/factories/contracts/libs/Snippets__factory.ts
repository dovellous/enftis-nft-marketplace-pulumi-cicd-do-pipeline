/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Snippets,
  SnippetsInterface,
} from "../../../contracts/libs/Snippets";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_bytes32",
        type: "bytes32",
      },
    ],
    name: "bytes32String",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "a",
        type: "string",
      },
      {
        internalType: "string",
        name: "b",
        type: "string",
      },
    ],
    name: "compareStrings",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getIPFSPrefix",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_itemKey",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "minterAddress",
            type: "address",
          },
          {
            internalType: "address[2]",
            name: "creatorAddress",
            type: "address[2]",
          },
          {
            internalType: "address",
            name: "ownerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updatedAt",
            type: "uint256",
          },
        ],
        internalType: "struct Structs.NFTItem",
        name: "_nftItem",
        type: "tuple",
      },
      {
        internalType: "string",
        name: "_tokenURIString",
        type: "string",
      },
    ],
    name: "searchHasMatch",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "what",
        type: "string",
      },
      {
        internalType: "string",
        name: "where",
        type: "string",
      },
    ],
    name: "stringContains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "startIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endIndex",
        type: "uint256",
      },
    ],
    name: "subString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "trim",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6112fe61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100775760003560e01c8063748493941461007c5780637966c431146100a5578063bed34bba146100b8578063d10c6b33146100db578063d6d60ded14610109578063e14c63f51461011c578063ed63455c1461012f575b600080fd5b61008f61008a366004610cc0565b610142565b60405161009c9190610cfd565b60405180910390f35b61008f6100b3366004610e45565b610278565b6100cb6100c6366004610e92565b610344565b604051901515815260200161009c565b6040517f66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe815260200161009c565b6100cb610117366004610f1d565b61039e565b61008f61012a366004611072565b610a6c565b6100cb61013d366004610e92565b610ab8565b606060005b60208160ff1610801561017b5750828160ff166020811061016a5761016a6110f0565b1a60f81b6001600160f81b03191615155b15610192578061018a8161111c565b915050610147565b60008160ff166001600160401b038111156101af576101af610d30565b6040519080825280601f01601f1916602001820160405280156101d9576020820181803683370190505b509050600091505b60208260ff161080156102155750838260ff1660208110610204576102046110f0565b1a60f81b6001600160f81b03191615155b1561027157838260ff166020811061022f5761022f6110f0565b1a60f81b818360ff1681518110610248576102486110f0565b60200101906001600160f81b031916908160001a905350816102698161111c565b9250506101e1565b9392505050565b6060836000610287858561113b565b6001600160401b0381111561029e5761029e610d30565b6040519080825280601f01601f1916602001820160405280156102c8576020820181803683370190505b509050845b8481101561033a578281815181106102e7576102e76110f0565b01602001516001600160f81b03191682610301888461113b565b81518110610311576103116110f0565b60200101906001600160f81b031916908160001a905350806103328161114e565b9150506102cd565b5095945050505050565b6000816040516020016103579190611167565b604051602081830303815290604052805190602001208360405160200161037e9190611167565b604051602081830303815290604052805190602001201490505b92915050565b6000808360600151600014610a615783606001516000036103c0579050610a64565b60208481015101516001600160a01b03166103dc579050610a64565b60408401516001600160a01b03166103f5579050610a64565b61041d866040518060400160405280600681526020016536b4b73a32b960d11b815250610344565b15610462576000858060200190518101906104389190611183565b9050806001600160a01b031685600001516001600160a01b03160361045c57600191505b50610a61565b61048b866040518060400160405280600781526020016631b932b0ba37b960c91b815250610344565b156104cd576000858060200190518101906104a69190611183565b60208681015101519091506001600160a01b0380831691160361045c576001915050610a61565b6104f4866040518060400160405280600581526020016437bbb732b960d91b815250610344565b156105385760008580602001905181019061050f9190611183565b9050806001600160a01b031685604001516001600160a01b03160361045c576001915050610a61565b61056186604051806040016040528060078152602001666164647265737360c81b815250610344565b156105e65760008580602001905181019061057c9190611183565b9050806001600160a01b031685600001516001600160a01b0316036105a057600191505b60208581015101516001600160a01b038281169116036105bf57600191505b806001600160a01b031685604001516001600160a01b03160361045c576001915050610a61565b61061086604051806040016040528060088152602001671d1bdad95b97da5960c21b815250610344565b156106425760008580602001905181019061062b91906111a0565b90508085606001510361045c576001915050610a61565b61066b86604051806040016040528060078152602001663ab4b73a191a9b60c91b815250610344565b156106865760008580602001905181019061062b91906111a0565b6106b18660405180604001604052806009815260200168746f6b656e5f75726960b81b815250610344565b156106e7576000858060200190518101906106cc91906111fe565b90506106d88482610344565b1561045c576001915050610a61565b61070e8660405180604001604052806005815260200164627974657360d81b815250610344565b15610729576000858060200190518101906106cc91906111fe565b6107518660405180604001604052806006815260200165737472696e6760d01b815250610344565b1561076c576000858060200190518101906106cc91906111fe565b610798866040518060400160405280600a81526020016918dc99585d195917d85d60b21b815250610344565b156107ca576000858060200190518101906107b391906111a0565b90508085608001510361045c576001915050610a61565b6107fa866040518060400160405280600e81526020016d637265617465645f6265666f726560901b815250610344565b1561082d5760008580602001905181019061081591906111a0565b9050808560800151111561045c576001915050610a61565b61085c866040518060400160405280600d81526020016c31b932b0ba32b22fb0b33a32b960991b815250610344565b1561088f5760008580602001905181019061087791906111a0565b9050808560800151101561045c576001915050610a61565b6108bb866040518060400160405280600a8152602001691d5c19185d195917d85d60b21b815250610344565b156108ed576000858060200190518101906108d691906111a0565b9050808560a001510361045c576001915050610a61565b61091d866040518060400160405280600e81526020016d757064617465645f6265666f726560901b815250610344565b156109505760008580602001905181019061093891906111a0565b9050808560a00151111561045c576001915050610a61565b61097f866040518060400160405280600d81526020016c3ab83230ba32b22fb0b33a32b960991b815250610344565b156109b25760008580602001905181019061099a91906111a0565b9050808560a00151101561045c576001915050610a61565b6109dd8660405180604001604052806009815260200168074696d657374616d760bc1b815250610344565b15610a1f576000858060200190518101906109f891906111a0565b905080856080015103610a0a57600191505b808560a001510361045c576001915050610a61565b60008086806020019051810190610a369190611232565b91509150610a4382610b83565b600003610a5e57610a548186610ab8565b15610a5e57600192505b50505b90505b949350505050565b6060610a7a8284868861128b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509298975050505050505050565b81518151600091849184911115610ace57600080fd5b6000805b83518351610ae0919061113b565b811161033a57600160005b8551811015610b5f57858181518110610b0657610b066110f0565b01602001516001600160f81b03191685610b2083866112b5565b81518110610b3057610b306110f0565b01602001516001600160f81b03191614610b4d5760009150610b5f565b80610b578161114e565b915050610aeb565b508015610b7057600192505061033a565b5080610b7b8161114e565b915050610ad2565b600080825b8051821015610cb9576007818381518110610ba557610ba56110f0565b01602001516001600160f81b031990811690911c16600003610bd357610bcc6001836112b5565b9150610ca7565b8051600360f91b90600590839085908110610bf057610bf06110f0565b01602001516001600160f81b031990811690911c1603610c1557610bcc6002836112b5565b8051600760f91b90600490839085908110610c3257610c326110f0565b01602001516001600160f81b031990811690911c1603610c5757610bcc6003836112b5565b8051600f60f91b90600390839085908110610c7457610c746110f0565b01602001516001600160f81b031990811690911c1603610c9957610bcc6004836112b5565b610ca46001836112b5565b91505b82610cb18161114e565b935050610b88565b5050919050565b600060208284031215610cd257600080fd5b5035919050565b60005b83811015610cf4578181015183820152602001610cdc565b50506000910152565b6020815260008251806020840152610d1c816040850160208701610cd9565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715610d6857610d68610d30565b60405290565b604080519081016001600160401b0381118282101715610d6857610d68610d30565b604051601f8201601f191681016001600160401b0381118282101715610db857610db8610d30565b604052919050565b60006001600160401b03821115610dd957610dd9610d30565b50601f01601f191660200190565b6000610dfa610df584610dc0565b610d90565b9050828152838383011115610e0e57600080fd5b828260208301376000602084830101529392505050565b600082601f830112610e3657600080fd5b61027183833560208501610de7565b600080600060608486031215610e5a57600080fd5b83356001600160401b03811115610e7057600080fd5b610e7c86828701610e25565b9660208601359650604090950135949350505050565b60008060408385031215610ea557600080fd5b82356001600160401b0380821115610ebc57600080fd5b610ec886838701610e25565b93506020850135915080821115610ede57600080fd5b50610eeb85828601610e25565b9150509250929050565b6001600160a01b0381168114610f0a57600080fd5b50565b8035610f1881610ef5565b919050565b600080600080848603610140811215610f3557600080fd5b85356001600160401b0380821115610f4c57600080fd5b610f5889838a01610e25565b9650602091508188013581811115610f6f57600080fd5b8801601f81018a13610f8057600080fd5b610f8e8a8235858401610de7565b96505060e0603f1984011215610fa357600080fd5b610fab610d46565b92506040880135610fbb81610ef5565b8352607f88018913610fcc57600080fd5b610fd4610d6e565b8060a08a018b811115610fe657600080fd5b60608b015b8181101561100b578035610ffe81610ef5565b8452928501928501610feb565b50818587015261101a81610f0d565b604087015250505060c0880135606084015260e0880135608084015261010088013560a0840152919350610120870135918083111561105857600080fd5b505061106687828801610e25565b91505092959194509250565b6000806000806060858703121561108857600080fd5b84356001600160401b038082111561109f57600080fd5b818701915087601f8301126110b357600080fd5b8135818111156110c257600080fd5b8860208285010111156110d457600080fd5b6020928301999098509187013596604001359550909350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff810361113257611132611106565b60010192915050565b8181038181111561039857610398611106565b60006001820161116057611160611106565b5060010190565b60008251611179818460208701610cd9565b9190910192915050565b60006020828403121561119557600080fd5b815161027181610ef5565b6000602082840312156111b257600080fd5b5051919050565b600082601f8301126111ca57600080fd5b81516111d8610df582610dc0565b8181528460208386010111156111ed57600080fd5b610a64826020830160208701610cd9565b60006020828403121561121057600080fd5b81516001600160401b0381111561122657600080fd5b610a64848285016111b9565b6000806040838503121561124557600080fd5b82516001600160401b038082111561125c57600080fd5b611268868387016111b9565b9350602085015191508082111561127e57600080fd5b50610eeb858286016111b9565b6000808585111561129b57600080fd5b838611156112a857600080fd5b5050820193919092039150565b808201808211156103985761039861110656fea2646970667358221220e501360f72c0e35362bf4ed0dcfcddb6f02a61cc15bec37b4b2694b34c15315464736f6c63430008130033";

type SnippetsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SnippetsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Snippets__factory extends ContractFactory {
  constructor(...args: SnippetsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Snippets> {
    return super.deploy(overrides || {}) as Promise<Snippets>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Snippets {
    return super.attach(address) as Snippets;
  }
  override connect(signer: Signer): Snippets__factory {
    return super.connect(signer) as Snippets__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SnippetsInterface {
    return new utils.Interface(_abi) as SnippetsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Snippets {
    return new Contract(address, _abi, signerOrProvider) as Snippets;
  }
}
