/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Snippets,
  SnippetsInterface,
} from "../../../contracts/libs/Snippets";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_data",
        type: "bytes32",
      },
    ],
    name: "bytes32String",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "a",
        type: "string",
      },
      {
        internalType: "string",
        name: "b",
        type: "string",
      },
    ],
    name: "compareStrings",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getIPFSPrefix",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_itemKey",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "minterAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "creatorAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "ownerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updatedAt",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "tokenURI",
            type: "string",
          },
        ],
        internalType: "struct Structs.NFTItem",
        name: "_nftItem",
        type: "tuple",
      },
    ],
    name: "searchHasMatch",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "what",
        type: "string",
      },
      {
        internalType: "string",
        name: "where",
        type: "string",
      },
    ],
    name: "stringContains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "startIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endIndex",
        type: "uint256",
      },
    ],
    name: "subString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "trim",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6113c661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100775760003560e01c80632a2fa8d21461007c57806374849394146100a45780637966c431146100c4578063bed34bba146100d7578063d10c6b33146100ea578063e14c63f514610118578063ed63455c1461012b575b600080fd5b61008f61008a366004610e0b565b61013e565b60405190151581526020015b60405180910390f35b6100b76100b2366004610f2a565b610815565b60405161009b9190610f67565b6100b76100d2366004610f9a565b610976565b61008f6100e5366004610fe7565b610a42565b6040517f66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe815260200161009b565b6100b761012636600461104a565b610a9c565b61008f610139366004610fe7565b610ae8565b600080826060015160001461080b57826060015160000361016057905061080e565b60208301516001600160a01b031661017957905061080e565b60408301516001600160a01b031661019257905061080e565b6101ba856040518060400160405280600681526020016536b4b73a32b960d11b815250610a42565b156101ff576000848060200190518101906101d591906110c8565b9050806001600160a01b031684600001516001600160a01b0316036101f957600191505b5061080b565b610228856040518060400160405280600781526020016631b932b0ba37b960c91b815250610a42565b1561026c5760008480602001905181019061024391906110c8565b9050806001600160a01b031684602001516001600160a01b0316036101f957600191505061080b565b610293856040518060400160405280600581526020016437bbb732b960d91b815250610a42565b156102d7576000848060200190518101906102ae91906110c8565b9050806001600160a01b031684604001516001600160a01b0316036101f957600191505061080b565b61030085604051806040016040528060078152602001666164647265737360c81b815250610a42565b156103885760008480602001905181019061031b91906110c8565b9050806001600160a01b031684600001516001600160a01b03160361033f57600191505b806001600160a01b031684602001516001600160a01b03160361036157600191505b806001600160a01b031684604001516001600160a01b0316036101f957600191505061080b565b6103b285604051806040016040528060088152602001671d1bdad95b97da5960c21b815250610a42565b156103e4576000848060200190518101906103cd91906110e5565b9050808460600151036101f957600191505061080b565b61040d85604051806040016040528060078152602001663ab4b73a191a9b60c91b815250610a42565b15610428576000848060200190518101906103cd91906110e5565b6104538560405180604001604052806009815260200168746f6b656e5f75726960b81b815250610a42565b1561048d5760008480602001905181019061046e919061114b565b905061047e8460c0015182610a42565b156101f957600191505061080b565b6104b48560405180604001604052806005815260200164627974657360d81b815250610a42565b156104cf5760008480602001905181019061046e919061114b565b6104f78560405180604001604052806006815260200165737472696e6760d01b815250610a42565b156105125760008480602001905181019061046e919061114b565b61053e856040518060400160405280600a81526020016918dc99585d195917d85d60b21b815250610a42565b156105705760008480602001905181019061055991906110e5565b9050808460800151036101f957600191505061080b565b6105a0856040518060400160405280600e81526020016d637265617465645f6265666f726560901b815250610a42565b156105d3576000848060200190518101906105bb91906110e5565b905080846080015111156101f957600191505061080b565b610602856040518060400160405280600d81526020016c31b932b0ba32b22fb0b33a32b960991b815250610a42565b156106355760008480602001905181019061061d91906110e5565b905080846080015110156101f957600191505061080b565b610661856040518060400160405280600a8152602001691d5c19185d195917d85d60b21b815250610a42565b156106935760008480602001905181019061067c91906110e5565b9050808460a00151036101f957600191505061080b565b6106c3856040518060400160405280600e81526020016d757064617465645f6265666f726560901b815250610a42565b156106f6576000848060200190518101906106de91906110e5565b9050808460a0015111156101f957600191505061080b565b610725856040518060400160405280600d81526020016c3ab83230ba32b22fb0b33a32b960991b815250610a42565b156107585760008480602001905181019061074091906110e5565b9050808460a0015110156101f957600191505061080b565b6107838560405180604001604052806009815260200168074696d657374616d760bc1b815250610a42565b156107c55760008480602001905181019061079e91906110e5565b9050808460800151036107b057600191505b808460a00151036101f957600191505061080b565b600080858060200190518101906107dc919061117f565b915091506107e982610bb3565b600003610808576107fe818660c00151610ae8565b1561080857600192505b50505b90505b9392505050565b604080516020808252818301909252606091600091906020820181803683370190505090506000805b60208110156108c45760006108548260086111ee565b61085f9060026112e9565b61086990876111ee565b90506001600160f81b03198116156108b3578084848151811061088e5761088e6112f5565b60200101906001600160f81b031916908160001a905350826108af8161130b565b9350505b506108bd8161130b565b905061083e565b506000816001600160401b038111156108df576108df610cf0565b6040519080825280601f01601f191660200182016040528015610909576020820181803683370190505b50905060005b8281101561096d57838181518110610929576109296112f5565b602001015160f81c60f81b828281518110610946576109466112f5565b60200101906001600160f81b031916908160001a9053506109668161130b565b905061090f565b50949350505050565b60608360006109858585611324565b6001600160401b0381111561099c5761099c610cf0565b6040519080825280601f01601f1916602001820160405280156109c6576020820181803683370190505b509050845b84811015610a38578281815181106109e5576109e56112f5565b01602001516001600160f81b031916826109ff8884611324565b81518110610a0f57610a0f6112f5565b60200101906001600160f81b031916908160001a90535080610a308161130b565b9150506109cb565b5095945050505050565b600081604051602001610a559190611337565b6040516020818303038152906040528051906020012083604051602001610a7c9190611337565b604051602081830303815290604052805190602001201490505b92915050565b6060610aaa82848688611353565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509298975050505050505050565b81518151600091849184911115610afe57600080fd5b6000805b83518351610b109190611324565b8111610a3857600160005b8551811015610b8f57858181518110610b3657610b366112f5565b01602001516001600160f81b03191685610b50838661137d565b81518110610b6057610b606112f5565b01602001516001600160f81b03191614610b7d5760009150610b8f565b80610b878161130b565b915050610b1b565b508015610ba0576001925050610a38565b5080610bab8161130b565b915050610b02565b600080825b8051821015610ce9576007818381518110610bd557610bd56112f5565b01602001516001600160f81b031990811690911c16600003610c0357610bfc60018361137d565b9150610cd7565b8051600360f91b90600590839085908110610c2057610c206112f5565b01602001516001600160f81b031990811690911c1603610c4557610bfc60028361137d565b8051600760f91b90600490839085908110610c6257610c626112f5565b01602001516001600160f81b031990811690911c1603610c8757610bfc60038361137d565b8051600f60f91b90600390839085908110610ca457610ca46112f5565b01602001516001600160f81b031990811690911c1603610cc957610bfc60048361137d565b610cd460018361137d565b91505b82610ce18161130b565b935050610bb8565b5050919050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715610d2857610d28610cf0565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610d5657610d56610cf0565b604052919050565b60006001600160401b03821115610d7757610d77610cf0565b50601f01601f191660200190565b6000610d98610d9384610d5e565b610d2e565b9050828152838383011115610dac57600080fd5b828260208301376000602084830101529392505050565b600082601f830112610dd457600080fd5b61080e83833560208501610d85565b6001600160a01b0381168114610df857600080fd5b50565b8035610e0681610de3565b919050565b600080600060608486031215610e2057600080fd5b83356001600160401b0380821115610e3757600080fd5b610e4387838801610dc3565b94506020860135915080821115610e5957600080fd5b818601915086601f830112610e6d57600080fd5b610e7c87833560208501610d85565b93506040860135915080821115610e9257600080fd5b9085019060e08288031215610ea657600080fd5b610eae610d06565b610eb783610dfb565b8152610ec560208401610dfb565b6020820152610ed660408401610dfb565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013582811115610f0b57600080fd5b610f1789828601610dc3565b60c0830152508093505050509250925092565b600060208284031215610f3c57600080fd5b5035919050565b60005b83811015610f5e578181015183820152602001610f46565b50506000910152565b6020815260008251806020840152610f86816040850160208701610f43565b601f01601f19169190910160400192915050565b600080600060608486031215610faf57600080fd5b83356001600160401b03811115610fc557600080fd5b610fd186828701610dc3565b9660208601359650604090950135949350505050565b60008060408385031215610ffa57600080fd5b82356001600160401b038082111561101157600080fd5b61101d86838701610dc3565b9350602085013591508082111561103357600080fd5b5061104085828601610dc3565b9150509250929050565b6000806000806060858703121561106057600080fd5b84356001600160401b038082111561107757600080fd5b818701915087601f83011261108b57600080fd5b81358181111561109a57600080fd5b8860208285010111156110ac57600080fd5b6020928301999098509187013596604001359550909350505050565b6000602082840312156110da57600080fd5b815161080e81610de3565b6000602082840312156110f757600080fd5b5051919050565b600082601f83011261110f57600080fd5b815161111d610d9382610d5e565b81815284602083860101111561113257600080fd5b611143826020830160208701610f43565b949350505050565b60006020828403121561115d57600080fd5b81516001600160401b0381111561117357600080fd5b611143848285016110fe565b6000806040838503121561119257600080fd5b82516001600160401b03808211156111a957600080fd5b6111b5868387016110fe565b935060208501519150808211156111cb57600080fd5b50611040858286016110fe565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610a9657610a966111d8565b600181815b80851115611240578160001904821115611226576112266111d8565b8085161561123357918102915b93841c939080029061120a565b509250929050565b60008261125757506001610a96565b8161126457506000610a96565b816001811461127a5760028114611284576112a0565b6001915050610a96565b60ff841115611295576112956111d8565b50506001821b610a96565b5060208310610133831016604e8410600b84101617156112c3575081810a610a96565b6112cd8383611205565b80600019048211156112e1576112e16111d8565b029392505050565b600061080e8383611248565b634e487b7160e01b600052603260045260246000fd5b60006001820161131d5761131d6111d8565b5060010190565b81810381811115610a9657610a966111d8565b60008251611349818460208701610f43565b9190910192915050565b6000808585111561136357600080fd5b8386111561137057600080fd5b5050820193919092039150565b80820180821115610a9657610a966111d856fea264697066735822122001e96b53010c0c9dfb43770c8b43e8c187133ae84e214627ddcd2114817140ca64736f6c63430008130033";

type SnippetsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SnippetsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Snippets__factory extends ContractFactory {
  constructor(...args: SnippetsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Snippets> {
    return super.deploy(overrides || {}) as Promise<Snippets>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Snippets {
    return super.attach(address) as Snippets;
  }
  override connect(signer: Signer): Snippets__factory {
    return super.connect(signer) as Snippets__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SnippetsInterface {
    return new utils.Interface(_abi) as SnippetsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Snippets {
    return new Contract(address, _abi, signerOrProvider) as Snippets;
  }
}
