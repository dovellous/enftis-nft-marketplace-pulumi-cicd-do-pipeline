/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Snippets,
  SnippetsInterface,
} from "../../../contracts/libs/Snippets";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_data",
        type: "bytes32",
      },
    ],
    name: "bytes32String",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "a",
        type: "string",
      },
      {
        internalType: "string",
        name: "b",
        type: "string",
      },
    ],
    name: "compareStrings",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getIPFSPrefix",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_itemKey",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "minterAddress",
            type: "address",
          },
          {
            internalType: "address[2]",
            name: "creatorAddress",
            type: "address[2]",
          },
          {
            internalType: "address",
            name: "ownerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updatedAt",
            type: "uint256",
          },
        ],
        internalType: "struct Structs.NFTItem",
        name: "_nftItem",
        type: "tuple",
      },
      {
        internalType: "string",
        name: "_tokenURIString",
        type: "string",
      },
    ],
    name: "searchHasMatch",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "what",
        type: "string",
      },
      {
        internalType: "string",
        name: "where",
        type: "string",
      },
    ],
    name: "stringContains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "startIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endIndex",
        type: "uint256",
      },
    ],
    name: "subString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "trim",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61141861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100775760003560e01c8063748493941461007c5780637966c431146100a5578063bed34bba146100b8578063d10c6b33146100db578063d6d60ded14610109578063e14c63f51461011c578063ed63455c1461012f575b600080fd5b61008f61008a366004610ceb565b610142565b60405161009c9190610d28565b60405180910390f35b61008f6100b3366004610e77565b6102a3565b6100cb6100c6366004610ec4565b61036f565b604051901515815260200161009c565b6040517f66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe815260200161009c565b6100cb610117366004610f4f565b6103c9565b61008f61012a3660046110a4565b610a97565b6100cb61013d366004610ec4565b610ae3565b604080516020808252818301909252606091600091906020820181803683370190505090506000805b60208110156101f1576000610181826008611138565b61018c906002611233565b6101969087611138565b90506001600160f81b03198116156101e057808484815181106101bb576101bb61123f565b60200101906001600160f81b031916908160001a905350826101dc81611255565b9350505b506101ea81611255565b905061016b565b506000816001600160401b0381111561020c5761020c610d5b565b6040519080825280601f01601f191660200182016040528015610236576020820181803683370190505b50905060005b8281101561029a578381815181106102565761025661123f565b602001015160f81c60f81b8282815181106102735761027361123f565b60200101906001600160f81b031916908160001a90535061029381611255565b905061023c565b50949350505050565b60608360006102b2858561126e565b6001600160401b038111156102c9576102c9610d5b565b6040519080825280601f01601f1916602001820160405280156102f3576020820181803683370190505b509050845b84811015610365578281815181106103125761031261123f565b01602001516001600160f81b0319168261032c888461126e565b8151811061033c5761033c61123f565b60200101906001600160f81b031916908160001a9053508061035d81611255565b9150506102f8565b5095945050505050565b6000816040516020016103829190611281565b60405160208183030381529060405280519060200120836040516020016103a99190611281565b604051602081830303815290604052805190602001201490505b92915050565b6000808360600151600014610a8c5783606001516000036103eb579050610a8f565b60208481015101516001600160a01b0316610407579050610a8f565b60408401516001600160a01b0316610420579050610a8f565b610448866040518060400160405280600681526020016536b4b73a32b960d11b81525061036f565b1561048d57600085806020019051810190610463919061129d565b9050806001600160a01b031685600001516001600160a01b03160361048757600191505b50610a8c565b6104b6866040518060400160405280600781526020016631b932b0ba37b960c91b81525061036f565b156104f8576000858060200190518101906104d1919061129d565b60208681015101519091506001600160a01b03808316911603610487576001915050610a8c565b61051f866040518060400160405280600581526020016437bbb732b960d91b81525061036f565b156105635760008580602001905181019061053a919061129d565b9050806001600160a01b031685604001516001600160a01b031603610487576001915050610a8c565b61058c86604051806040016040528060078152602001666164647265737360c81b81525061036f565b15610611576000858060200190518101906105a7919061129d565b9050806001600160a01b031685600001516001600160a01b0316036105cb57600191505b60208581015101516001600160a01b038281169116036105ea57600191505b806001600160a01b031685604001516001600160a01b031603610487576001915050610a8c565b61063b86604051806040016040528060088152602001671d1bdad95b97da5960c21b81525061036f565b1561066d5760008580602001905181019061065691906112ba565b905080856060015103610487576001915050610a8c565b61069686604051806040016040528060078152602001663ab4b73a191a9b60c91b81525061036f565b156106b15760008580602001905181019061065691906112ba565b6106dc8660405180604001604052806009815260200168746f6b656e5f75726960b81b81525061036f565b15610712576000858060200190518101906106f79190611318565b9050610703848261036f565b15610487576001915050610a8c565b6107398660405180604001604052806005815260200164627974657360d81b81525061036f565b15610754576000858060200190518101906106f79190611318565b61077c8660405180604001604052806006815260200165737472696e6760d01b81525061036f565b15610797576000858060200190518101906106f79190611318565b6107c3866040518060400160405280600a81526020016918dc99585d195917d85d60b21b81525061036f565b156107f5576000858060200190518101906107de91906112ba565b905080856080015103610487576001915050610a8c565b610825866040518060400160405280600e81526020016d637265617465645f6265666f726560901b81525061036f565b156108585760008580602001905181019061084091906112ba565b90508085608001511115610487576001915050610a8c565b610887866040518060400160405280600d81526020016c31b932b0ba32b22fb0b33a32b960991b81525061036f565b156108ba576000858060200190518101906108a291906112ba565b90508085608001511015610487576001915050610a8c565b6108e6866040518060400160405280600a8152602001691d5c19185d195917d85d60b21b81525061036f565b156109185760008580602001905181019061090191906112ba565b9050808560a0015103610487576001915050610a8c565b610948866040518060400160405280600e81526020016d757064617465645f6265666f726560901b81525061036f565b1561097b5760008580602001905181019061096391906112ba565b9050808560a001511115610487576001915050610a8c565b6109aa866040518060400160405280600d81526020016c3ab83230ba32b22fb0b33a32b960991b81525061036f565b156109dd576000858060200190518101906109c591906112ba565b9050808560a001511015610487576001915050610a8c565b610a088660405180604001604052806009815260200168074696d657374616d760bc1b81525061036f565b15610a4a57600085806020019051810190610a2391906112ba565b905080856080015103610a3557600191505b808560a0015103610487576001915050610a8c565b60008086806020019051810190610a61919061134c565b91509150610a6e82610bae565b600003610a8957610a7f8186610ae3565b15610a8957600192505b50505b90505b949350505050565b6060610aa5828486886113a5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509298975050505050505050565b81518151600091849184911115610af957600080fd5b6000805b83518351610b0b919061126e565b811161036557600160005b8551811015610b8a57858181518110610b3157610b3161123f565b01602001516001600160f81b03191685610b4b83866113cf565b81518110610b5b57610b5b61123f565b01602001516001600160f81b03191614610b785760009150610b8a565b80610b8281611255565b915050610b16565b508015610b9b576001925050610365565b5080610ba681611255565b915050610afd565b600080825b8051821015610ce4576007818381518110610bd057610bd061123f565b01602001516001600160f81b031990811690911c16600003610bfe57610bf76001836113cf565b9150610cd2565b8051600360f91b90600590839085908110610c1b57610c1b61123f565b01602001516001600160f81b031990811690911c1603610c4057610bf76002836113cf565b8051600760f91b90600490839085908110610c5d57610c5d61123f565b01602001516001600160f81b031990811690911c1603610c8257610bf76003836113cf565b8051600f60f91b90600390839085908110610c9f57610c9f61123f565b01602001516001600160f81b031990811690911c1603610cc457610bf76004836113cf565b610ccf6001836113cf565b91505b82610cdc81611255565b935050610bb3565b5050919050565b600060208284031215610cfd57600080fd5b5035919050565b60005b83811015610d1f578181015183820152602001610d07565b50506000910152565b6020815260008251806020840152610d47816040850160208701610d04565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715610d9357610d93610d5b565b60405290565b604080519081016001600160401b0381118282101715610d9357610d93610d5b565b604051601f8201601f191681016001600160401b0381118282101715610de357610de3610d5b565b604052919050565b60006001600160401b03821115610e0457610e04610d5b565b50601f01601f191660200190565b6000610e25610e2084610deb565b610dbb565b9050828152838383011115610e3957600080fd5b828260208301376000602084830101529392505050565b600082601f830112610e6157600080fd5b610e7083833560208501610e12565b9392505050565b600080600060608486031215610e8c57600080fd5b83356001600160401b03811115610ea257600080fd5b610eae86828701610e50565b9660208601359650604090950135949350505050565b60008060408385031215610ed757600080fd5b82356001600160401b0380821115610eee57600080fd5b610efa86838701610e50565b93506020850135915080821115610f1057600080fd5b50610f1d85828601610e50565b9150509250929050565b6001600160a01b0381168114610f3c57600080fd5b50565b8035610f4a81610f27565b919050565b600080600080848603610140811215610f6757600080fd5b85356001600160401b0380821115610f7e57600080fd5b610f8a89838a01610e50565b9650602091508188013581811115610fa157600080fd5b8801601f81018a13610fb257600080fd5b610fc08a8235858401610e12565b96505060e0603f1984011215610fd557600080fd5b610fdd610d71565b92506040880135610fed81610f27565b8352607f88018913610ffe57600080fd5b611006610d99565b8060a08a018b81111561101857600080fd5b60608b015b8181101561103d57803561103081610f27565b845292850192850161101d565b50818587015261104c81610f3f565b604087015250505060c0880135606084015260e0880135608084015261010088013560a0840152919350610120870135918083111561108a57600080fd5b505061109887828801610e50565b91505092959194509250565b600080600080606085870312156110ba57600080fd5b84356001600160401b03808211156110d157600080fd5b818701915087601f8301126110e557600080fd5b8135818111156110f457600080fd5b88602082850101111561110657600080fd5b6020928301999098509187013596604001359550909350505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103c3576103c3611122565b600181815b8085111561118a57816000190482111561117057611170611122565b8085161561117d57918102915b93841c9390800290611154565b509250929050565b6000826111a1575060016103c3565b816111ae575060006103c3565b81600181146111c457600281146111ce576111ea565b60019150506103c3565b60ff8411156111df576111df611122565b50506001821b6103c3565b5060208310610133831016604e8410600b841016171561120d575081810a6103c3565b611217838361114f565b806000190482111561122b5761122b611122565b029392505050565b6000610e708383611192565b634e487b7160e01b600052603260045260246000fd5b60006001820161126757611267611122565b5060010190565b818103818111156103c3576103c3611122565b60008251611293818460208701610d04565b9190910192915050565b6000602082840312156112af57600080fd5b8151610e7081610f27565b6000602082840312156112cc57600080fd5b5051919050565b600082601f8301126112e457600080fd5b81516112f2610e2082610deb565b81815284602083860101111561130757600080fd5b610a8f826020830160208701610d04565b60006020828403121561132a57600080fd5b81516001600160401b0381111561134057600080fd5b610a8f848285016112d3565b6000806040838503121561135f57600080fd5b82516001600160401b038082111561137657600080fd5b611382868387016112d3565b9350602085015191508082111561139857600080fd5b50610f1d858286016112d3565b600080858511156113b557600080fd5b838611156113c257600080fd5b5050820193919092039150565b808201808211156103c3576103c361112256fea2646970667358221220222483beac7a19e6d5a7b21ab278ca61979c7291bd962ea2a8b54078a5c3e3f264736f6c63430008130033";

type SnippetsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SnippetsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Snippets__factory extends ContractFactory {
  constructor(...args: SnippetsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Snippets> {
    return super.deploy(overrides || {}) as Promise<Snippets>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Snippets {
    return super.attach(address) as Snippets;
  }
  override connect(signer: Signer): Snippets__factory {
    return super.connect(signer) as Snippets__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SnippetsInterface {
    return new utils.Interface(_abi) as SnippetsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Snippets {
    return new Contract(address, _abi, signerOrProvider) as Snippets;
  }
}
