/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ERCLogger,
  ERCLoggerInterface,
} from "../../contracts-v5/ERCLogger";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "getERCMarketplaceLogging",
    outputs: [
      {
        components: [
          {
            internalType: "enum Enums.NFTMarketItemActivityType",
            name: "activityType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "fromAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "toAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Structs.NFTMarketItemActivity[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "getERCTokenLogging",
    outputs: [
      {
        components: [
          {
            internalType: "enum Enums.TokenActivityType",
            name: "activityType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "fromAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "toAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Structs.TokenActivityItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "enum Enums.NFTMarketItemActivityType",
        name: "_type",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "logMarketplaceActivity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "enum Enums.TokenActivityType",
        name: "_type",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "logTokenActivity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum Enums.NFTMarketItemActivityType",
            name: "activityType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "fromAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "toAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Structs.NFTMarketItemActivity",
        name: "_activity",
        type: "tuple",
      },
    ],
    name: "setERCMarketplaceLogging",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum Enums.TokenActivityType",
            name: "activityType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "fromAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "toAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Structs.TokenActivityItem",
        name: "_activity",
        type: "tuple",
      },
    ],
    name: "setERCTokenLogging",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokenIdToNFTMarketItemActivity",
    outputs: [
      {
        internalType: "enum Enums.NFTMarketItemActivityType",
        name: "activityType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "fromAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "toAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokenIdToTokenActivityItem",
    outputs: [
      {
        internalType: "enum Enums.TokenActivityType",
        name: "activityType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "fromAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "toAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a0a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c80632a76c2481461007d5780635408c14c146100a95780635d41a01a146100be578063609ab04e146100de5780636ba70958146100f157806378d0fd78146101115780638d76e25114610134578063e54b397814610147575b600080fd5b61009061008b366004610636565b61015a565b6040516100a09493929190610693565b60405180910390f35b6100bc6100b73660046106d7565b6101be565b005b6100d16100cc36600461073d565b610286565b6040516100a09190610767565b6100bc6100ec366004610814565b610362565b6101046100ff36600461073d565b610410565b6040516100a091906108ab565b61012461011f366004610636565b6104dd565b6040516100a09493929190610915565b6100bc610142366004610932565b610505565b6100bc610155366004610981565b61055a565b6001602052826000526040600020602052816000526040600020818154811061018257600080fd5b600091825260209091206003909102018054600182015460029092015460ff821695506001600160a01b03610100909204821694509116915084565b336001600160a01b038716146102325760405162461bcd60e51b815260206004820152602e60248201527f4552434c6f6767696e67203a206c6f67546f6b656e4163746976697479203a2060448201526d24b73b30b634b21031b0b63632b960911b60648201526084015b60405180910390fd5b6000604051806080016040528084600c81111561025157610251610669565b81526001600160a01b03808916602083015287166040820152606001839052905061027d878583610362565b50505050505050565b6001600160a01b03821660009081526001602090815260408083208484528252808320805482518185028101850190935280835260609493849084015b82821015610355576000848152602090206040805160808101909152600384029091018054829060ff1660058111156102fe576102fe610669565b600581111561030f5761030f610669565b815281546001600160a01b0361010090910481166020808401919091526001808501549092166040840152600290930154606090920191909152918352920191016102c3565b5092979650505050505050565b6001600160a01b0383166000908152602081815260408083208584528252822080546001818101835591845291909220835160039092020180548493919291839160ff19169083600c8111156103ba576103ba610669565b021790555060208201518154610100600160a81b0319166101006001600160a01b039283160217825560408301516001830180546001600160a01b03191691909216179055606090910151600290910155505050565b6001600160a01b0382166000908152602081815260408083208484528252808320805482518185028101850190935280835260609493849084015b82821015610355576000848152602090206040805160808101909152600384029091018054829060ff16600c81111561048657610486610669565b600c81111561049757610497610669565b815281546001600160a01b03610100909104811660208084019190915260018085015490921660408401526002909301546060909201919091529183529201910161044b565b6000602052826000526040600020602052816000526040600020818154811061018257600080fd5b6001600160a01b0383166000908152600160208181526040808420868552825283208054808401825590845292208351600390930201805484939192839160ff1916908360058111156103ba576103ba610669565b336001600160a01b038716146105cf5760405162461bcd60e51b815260206004820152603460248201527f4552434c6f6767696e67203a206c6f674d61726b6574706c616365416374697660448201527334ba3c901d1024b73b30b634b21031b0b63632b960611b6064820152608401610229565b600060405180608001604052808460058111156105ee576105ee610669565b81526001600160a01b03808916602083015287166040820152606001839052905061027d878583610505565b80356001600160a01b038116811461063157600080fd5b919050565b60008060006060848603121561064b57600080fd5b6106548461061a565b95602085013595506040909401359392505050565b634e487b7160e01b600052602160045260246000fd5b6006811061068f5761068f610669565b9052565b608081016106a1828761067f565b6001600160a01b039485166020830152929093166040840152606090920191909152919050565b8035600d811061063157600080fd5b60008060008060008060c087890312156106f057600080fd5b6106f98761061a565b95506107076020880161061a565b94506107156040880161061a565b93506060870135925061072a608088016106c8565b915060a087013590509295509295509295565b6000806040838503121561075057600080fd5b6107598361061a565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156107d157815161079985825161067f565b808701516001600160a01b03908116868901528682015116868601526060908101519085015260809093019290850190600101610784565b5091979650505050505050565b604051608081016001600160401b038111828210171561080e57634e487b7160e01b600052604160045260246000fd5b60405290565b600080600083850360c081121561082a57600080fd5b6108338561061a565b9350602085013592506080603f198201121561084e57600080fd5b506108576107de565b610863604086016106c8565b81526108716060860161061a565b60208201526108826080860161061a565b604082015260a094909401356060850152509093909250565b600d811061068f5761068f610669565b602080825282518282018190526000919060409081850190868401855b828110156107d15781516108dd85825161089b565b808701516001600160a01b039081168689015286820151168686015260609081015190850152608090930192908501906001016108c8565b608081016106a1828761089b565b80356006811061063157600080fd5b600080600083850360c081121561094857600080fd5b6109518561061a565b9350602085013592506080603f198201121561096c57600080fd5b506109756107de565b61086360408601610923565b60008060008060008060c0878903121561099a57600080fd5b6109a38761061a565b95506109b16020880161061a565b94506109bf6040880161061a565b93506060870135925061072a6080880161092356fea2646970667358221220e1abfbb2ae5327b9944ca200008d18f7a424edc0605fa1f157811dea4403f5af64736f6c63430008150033";

type ERCLoggerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERCLoggerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERCLogger__factory extends ContractFactory {
  constructor(...args: ERCLoggerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERCLogger & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERCLogger__factory {
    return super.connect(runner) as ERCLogger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERCLoggerInterface {
    return new Interface(_abi) as ERCLoggerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERCLogger {
    return new Contract(address, _abi, runner) as unknown as ERCLogger;
  }
}
